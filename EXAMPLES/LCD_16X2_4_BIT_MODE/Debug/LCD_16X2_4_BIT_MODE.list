
LCD_16X2_4_BIT_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002504  08002504  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002504  08002504  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002504  08002504  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  0800257c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800257c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004399  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012f5  00000000  00000000  00024431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00025728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000478  00000000  00000000  00025c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133da  00000000  00000000  000260d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006187  00000000  00000000  000394aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077c1b  00000000  00000000  0003f631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b724c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001440  00000000  00000000  000b729c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002448 	.word	0x08002448

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08002448 	.word	0x08002448

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b5b0      	push	{r4, r5, r7, lr}
 800022e:	b0a4      	sub	sp, #144	; 0x90
 8000230:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000232:	f000 f9ff 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f887 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 f8cd 	bl	80003d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //create the lcd object for 4 bits  and 16x2 mode
  lcd_t lcd_1= lcd_create_4_bit(D1_RS_GPIO_Port, D1_RW_GPIO_Port, D1_E_GPIO_Port,
 800023e:	2514      	movs	r5, #20
 8000240:	1978      	adds	r0, r7, r5
 8000242:	4c3a      	ldr	r4, [pc, #232]	; (800032c <main+0x100>)
 8000244:	4a39      	ldr	r2, [pc, #228]	; (800032c <main+0x100>)
 8000246:	23a0      	movs	r3, #160	; 0xa0
 8000248:	05d9      	lsls	r1, r3, #23
 800024a:	2300      	movs	r3, #0
 800024c:	930b      	str	r3, [sp, #44]	; 0x2c
 800024e:	2304      	movs	r3, #4
 8000250:	930a      	str	r3, [sp, #40]	; 0x28
 8000252:	2308      	movs	r3, #8
 8000254:	9309      	str	r3, [sp, #36]	; 0x24
 8000256:	2308      	movs	r3, #8
 8000258:	9308      	str	r3, [sp, #32]
 800025a:	2310      	movs	r3, #16
 800025c:	9307      	str	r3, [sp, #28]
 800025e:	4b33      	ldr	r3, [pc, #204]	; (800032c <main+0x100>)
 8000260:	9306      	str	r3, [sp, #24]
 8000262:	4b32      	ldr	r3, [pc, #200]	; (800032c <main+0x100>)
 8000264:	9305      	str	r3, [sp, #20]
 8000266:	4b32      	ldr	r3, [pc, #200]	; (8000330 <main+0x104>)
 8000268:	9304      	str	r3, [sp, #16]
 800026a:	4b31      	ldr	r3, [pc, #196]	; (8000330 <main+0x104>)
 800026c:	9303      	str	r3, [sp, #12]
 800026e:	2302      	movs	r3, #2
 8000270:	9302      	str	r3, [sp, #8]
 8000272:	2301      	movs	r3, #1
 8000274:	9301      	str	r3, [sp, #4]
 8000276:	2380      	movs	r3, #128	; 0x80
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	0023      	movs	r3, r4
 800027e:	f001 fa8e 	bl	800179e <lcd_create_4_bit>
  								D1_RS_Pin, D1_RW_Pin, D1_E_Pin,
  								D1_D7_GPIO_Port, D1_D6_GPIO_Port, D1_D5_GPIO_Port, D1_D4_GPIO_Port,
  								D1_D7_Pin,D1_D6_Pin, D1_D5_Pin,D1_D4_Pin,lcd_chr_16x2_mode);
  lcd_clear(&lcd_1);//clear display
 8000282:	002c      	movs	r4, r5
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	f001 fc32 	bl	8001af0 <lcd_clear>
  lcd_set_cursor(&lcd_1, 0, 0);
 800028c:	193b      	adds	r3, r7, r4
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	0018      	movs	r0, r3
 8000294:	f001 fbdc 	bl	8001a50 <lcd_set_cursor>
  lcd_print_string(&lcd_1, "TEST 1");
 8000298:	4a26      	ldr	r2, [pc, #152]	; (8000334 <main+0x108>)
 800029a:	193b      	adds	r3, r7, r4
 800029c:	0011      	movs	r1, r2
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 fc0e 	bl	8001ac0 <lcd_print_string>
  lcd_set_cursor(&lcd_1, 1, 0);
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2200      	movs	r2, #0
 80002a8:	2101      	movs	r1, #1
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 fbd0 	bl	8001a50 <lcd_set_cursor>
  lcd_print_string(&lcd_1, "4 bit mode 16x2");
 80002b0:	4a21      	ldr	r2, [pc, #132]	; (8000338 <main+0x10c>)
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 fc02 	bl	8001ac0 <lcd_print_string>
  uint8_t counter=0;//var to show counter in lcd
 80002bc:	235f      	movs	r3, #95	; 0x5f
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
  char buffer [16];
  HAL_Delay(1500);
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <main+0x110>)
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fa3a 	bl	8000740 <HAL_Delay>
  lcd_clear(&lcd_1);//clear lcd
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fc0e 	bl	8001af0 <lcd_clear>


    /* USER CODE BEGIN 3 */


	  sprintf(buffer,"%3d",counter);
 80002d4:	255f      	movs	r5, #95	; 0x5f
 80002d6:	197b      	adds	r3, r7, r5
 80002d8:	781a      	ldrb	r2, [r3, #0]
 80002da:	4919      	ldr	r1, [pc, #100]	; (8000340 <main+0x114>)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 fc52 	bl	8001b88 <siprintf>
	  lcd_set_cursor(&lcd_1, 0, 0);
 80002e4:	2414      	movs	r4, #20
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2200      	movs	r2, #0
 80002ea:	2100      	movs	r1, #0
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fbaf 	bl	8001a50 <lcd_set_cursor>
	  lcd_print_string(&lcd_1, "Counter:");
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <main+0x118>)
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0011      	movs	r1, r2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fbe1 	bl	8001ac0 <lcd_print_string>
	  lcd_set_cursor(&lcd_1, 0, 9);
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	2209      	movs	r2, #9
 8000302:	2100      	movs	r1, #0
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fba3 	bl	8001a50 <lcd_set_cursor>
	  lcd_print_string(&lcd_1,buffer );
 800030a:	1d3a      	adds	r2, r7, #4
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0011      	movs	r1, r2
 8000310:	0018      	movs	r0, r3
 8000312:	f001 fbd5 	bl	8001ac0 <lcd_print_string>
	 counter++;
 8000316:	197b      	adds	r3, r7, r5
 8000318:	781a      	ldrb	r2, [r3, #0]
 800031a:	197b      	adds	r3, r7, r5
 800031c:	3201      	adds	r2, #1
 800031e:	701a      	strb	r2, [r3, #0]
	 HAL_Delay(1000);
 8000320:	23fa      	movs	r3, #250	; 0xfa
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fa0b 	bl	8000740 <HAL_Delay>
  {
 800032a:	e7d3      	b.n	80002d4 <main+0xa8>
 800032c:	50000c00 	.word	0x50000c00
 8000330:	50000400 	.word	0x50000400
 8000334:	08002460 	.word	0x08002460
 8000338:	08002468 	.word	0x08002468
 800033c:	000005dc 	.word	0x000005dc
 8000340:	08002478 	.word	0x08002478
 8000344:	0800247c 	.word	0x0800247c

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b093      	sub	sp, #76	; 0x4c
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	2414      	movs	r4, #20
 8000350:	193b      	adds	r3, r7, r4
 8000352:	0018      	movs	r0, r3
 8000354:	2334      	movs	r3, #52	; 0x34
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f001 fc0c 	bl	8001b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	0018      	movs	r0, r3
 8000362:	2310      	movs	r3, #16
 8000364:	001a      	movs	r2, r3
 8000366:	2100      	movs	r1, #0
 8000368:	f001 fc05 	bl	8001b76 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fc3f 	bl	8000bf4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000376:	193b      	adds	r3, r7, r4
 8000378:	2202      	movs	r2, #2
 800037a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037c:	193b      	adds	r3, r7, r4
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	0052      	lsls	r2, r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000384:	193b      	adds	r3, r7, r4
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2240      	movs	r2, #64	; 0x40
 800038e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	193b      	adds	r3, r7, r4
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fc6b 	bl	8000c74 <HAL_RCC_OscConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003a2:	f000 f89f 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2207      	movs	r2, #7
 80003aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2100      	movs	r1, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 ff66 	bl	8001294 <HAL_RCC_ClockConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003cc:	f000 f88a 	bl	80004e4 <Error_Handler>
  }
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b013      	add	sp, #76	; 0x4c
 80003d6:	bd90      	pop	{r4, r7, pc}

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b089      	sub	sp, #36	; 0x24
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	240c      	movs	r4, #12
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	0018      	movs	r0, r3
 80003e4:	2314      	movs	r3, #20
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f001 fbc4 	bl	8001b76 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b3a      	ldr	r3, [pc, #232]	; (80004d8 <MX_GPIO_Init+0x100>)
 80003f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f2:	4b39      	ldr	r3, [pc, #228]	; (80004d8 <MX_GPIO_Init+0x100>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	430a      	orrs	r2, r1
 80003f8:	635a      	str	r2, [r3, #52]	; 0x34
 80003fa:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <MX_GPIO_Init+0x100>)
 80003fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003fe:	2201      	movs	r2, #1
 8000400:	4013      	ands	r3, r2
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000406:	4b34      	ldr	r3, [pc, #208]	; (80004d8 <MX_GPIO_Init+0x100>)
 8000408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040a:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <MX_GPIO_Init+0x100>)
 800040c:	2108      	movs	r1, #8
 800040e:	430a      	orrs	r2, r1
 8000410:	635a      	str	r2, [r3, #52]	; 0x34
 8000412:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <MX_GPIO_Init+0x100>)
 8000414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000416:	2208      	movs	r2, #8
 8000418:	4013      	ands	r3, r2
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041e:	4b2e      	ldr	r3, [pc, #184]	; (80004d8 <MX_GPIO_Init+0x100>)
 8000420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <MX_GPIO_Init+0x100>)
 8000424:	2102      	movs	r1, #2
 8000426:	430a      	orrs	r2, r1
 8000428:	635a      	str	r2, [r3, #52]	; 0x34
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <MX_GPIO_Init+0x100>)
 800042c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042e:	2202      	movs	r2, #2
 8000430:	4013      	ands	r3, r2
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D1_RS_GPIO_Port, D1_RS_Pin, GPIO_PIN_RESET);
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	0219      	lsls	r1, r3, #8
 800043a:	23a0      	movs	r3, #160	; 0xa0
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2200      	movs	r2, #0
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fbb9 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D1_RW_Pin|D1_E_Pin|D1_D4_Pin|D1_D5_Pin, GPIO_PIN_RESET);
 8000446:	4b25      	ldr	r3, [pc, #148]	; (80004dc <MX_GPIO_Init+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	210f      	movs	r1, #15
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fbb3 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_D6_Pin|D1_D7_Pin, GPIO_PIN_RESET);
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_GPIO_Init+0x108>)
 8000454:	2200      	movs	r2, #0
 8000456:	2118      	movs	r1, #24
 8000458:	0018      	movs	r0, r3
 800045a:	f000 fbad 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D1_RS_Pin */
  GPIO_InitStruct.Pin = D1_RS_Pin;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2280      	movs	r2, #128	; 0x80
 8000462:	0212      	lsls	r2, r2, #8
 8000464:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2201      	movs	r2, #1
 800046a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D1_RS_GPIO_Port, &GPIO_InitStruct);
 8000478:	193a      	adds	r2, r7, r4
 800047a:	23a0      	movs	r3, #160	; 0xa0
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	0011      	movs	r1, r2
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fa35 	bl	80008f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_RW_Pin D1_E_Pin D1_D4_Pin D1_D5_Pin */
  GPIO_InitStruct.Pin = D1_RW_Pin|D1_E_Pin|D1_D4_Pin|D1_D5_Pin;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	220f      	movs	r2, #15
 800048a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2201      	movs	r2, #1
 8000490:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <MX_GPIO_Init+0x104>)
 80004a2:	0019      	movs	r1, r3
 80004a4:	0010      	movs	r0, r2
 80004a6:	f000 fa23 	bl	80008f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_D6_Pin D1_D7_Pin */
  GPIO_InitStruct.Pin = D1_D6_Pin|D1_D7_Pin;
 80004aa:	0021      	movs	r1, r4
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2218      	movs	r2, #24
 80004b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2201      	movs	r2, #1
 80004b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <MX_GPIO_Init+0x108>)
 80004c8:	0019      	movs	r1, r3
 80004ca:	0010      	movs	r0, r2
 80004cc:	f000 fa10 	bl	80008f0 <HAL_GPIO_Init>

}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b009      	add	sp, #36	; 0x24
 80004d6:	bd90      	pop	{r4, r7, pc}
 80004d8:	40021000 	.word	0x40021000
 80004dc:	50000c00 	.word	0x50000c00
 80004e0:	50000400 	.word	0x50000400

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	e7fe      	b.n	80004ec <Error_Handler+0x8>
	...

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x44>)
 80004f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_MspInit+0x44>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	430a      	orrs	r2, r1
 8000500:	641a      	str	r2, [r3, #64]	; 0x40
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x44>)
 8000504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000506:	2201      	movs	r2, #1
 8000508:	4013      	ands	r3, r2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_MspInit+0x44>)
 8000510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_MspInit+0x44>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0549      	lsls	r1, r1, #21
 8000518:	430a      	orrs	r2, r1
 800051a:	63da      	str	r2, [r3, #60]	; 0x3c
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_MspInit+0x44>)
 800051e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	055b      	lsls	r3, r3, #21
 8000524:	4013      	ands	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f8d4 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_sbrk+0x5c>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <_sbrk+0x60>)
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <_sbrk+0x64>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <_sbrk+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	18d3      	adds	r3, r2, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	429a      	cmp	r2, r3
 8000596:	d207      	bcs.n	80005a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000598:	f001 faba 	bl	8001b10 <__errno>
 800059c:	0003      	movs	r3, r0
 800059e:	220c      	movs	r2, #12
 80005a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	425b      	negs	r3, r3
 80005a6:	e009      	b.n	80005bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	18d2      	adds	r2, r2, r3
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <_sbrk+0x64>)
 80005b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	b006      	add	sp, #24
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20002000 	.word	0x20002000
 80005c8:	00000400 	.word	0x00000400
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	200000a8 	.word	0x200000a8

080005d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e4:	f7ff fff6 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060e:	f001 fa85 	bl	8001b1c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000612:	f7ff fe0b 	bl	800022c <main>

08000616 <LoopForever>:

LoopForever:
  b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000624:	0800250c 	.word	0x0800250c
  ldr r2, =_sbss
 8000628:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800062c:	200000a4 	.word	0x200000a4

08000630 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_IRQHandler>
	...

08000634 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <HAL_Init+0x3c>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_Init+0x3c>)
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0049      	lsls	r1, r1, #1
 800064a:	430a      	orrs	r2, r1
 800064c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f810 	bl	8000674 <HAL_InitTick>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d003      	beq.n	8000660 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	e001      	b.n	8000664 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000660:	f7ff ff46 	bl	80004f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	781b      	ldrb	r3, [r3, #0]
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800067c:	230f      	movs	r3, #15
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <HAL_InitTick+0x88>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d02b      	beq.n	80006e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <HAL_InitTick+0x8c>)
 800068e:	681c      	ldr	r4, [r3, #0]
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <HAL_InitTick+0x88>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	0019      	movs	r1, r3
 8000696:	23fa      	movs	r3, #250	; 0xfa
 8000698:	0098      	lsls	r0, r3, #2
 800069a:	f7ff fd3b 	bl	8000114 <__udivsi3>
 800069e:	0003      	movs	r3, r0
 80006a0:	0019      	movs	r1, r3
 80006a2:	0020      	movs	r0, r4
 80006a4:	f7ff fd36 	bl	8000114 <__udivsi3>
 80006a8:	0003      	movs	r3, r0
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 f913 	bl	80008d6 <HAL_SYSTICK_Config>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d112      	bne.n	80006da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d80a      	bhi.n	80006d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2301      	movs	r3, #1
 80006be:	425b      	negs	r3, r3
 80006c0:	2200      	movs	r2, #0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 f8f2 	bl	80008ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <HAL_InitTick+0x90>)
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e00d      	b.n	80006ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006d0:	230f      	movs	r3, #15
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e008      	b.n	80006ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006da:	230f      	movs	r3, #15
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e003      	b.n	80006ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006ec:	230f      	movs	r3, #15
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	781b      	ldrb	r3, [r3, #0]
}
 80006f2:	0018      	movs	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b005      	add	sp, #20
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000000 	.word	0x20000000
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x1c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	001a      	movs	r2, r3
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x20>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	18d2      	adds	r2, r2, r3
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <HAL_IncTick+0x20>)
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000008 	.word	0x20000008
 8000728:	20000090 	.word	0x20000090

0800072c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <HAL_GetTick+0x10>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	20000090 	.word	0x20000090

08000740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000748:	f7ff fff0 	bl	800072c <HAL_GetTick>
 800074c:	0003      	movs	r3, r0
 800074e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3301      	adds	r3, #1
 8000758:	d005      	beq.n	8000766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_Delay+0x44>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	001a      	movs	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	189b      	adds	r3, r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	f7ff ffe0 	bl	800072c <HAL_GetTick>
 800076c:	0002      	movs	r2, r0
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8f7      	bhi.n	8000768 <HAL_Delay+0x28>
  {
  }
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b004      	add	sp, #16
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000008 	.word	0x20000008

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	0002      	movs	r2, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b7f      	cmp	r3, #127	; 0x7f
 800079c:	d828      	bhi.n	80007f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079e:	4a2f      	ldr	r2, [pc, #188]	; (800085c <__NVIC_SetPriority+0xd4>)
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	33c0      	adds	r3, #192	; 0xc0
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	589b      	ldr	r3, [r3, r2]
 80007ae:	1dfa      	adds	r2, r7, #7
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	0011      	movs	r1, r2
 80007b4:	2203      	movs	r2, #3
 80007b6:	400a      	ands	r2, r1
 80007b8:	00d2      	lsls	r2, r2, #3
 80007ba:	21ff      	movs	r1, #255	; 0xff
 80007bc:	4091      	lsls	r1, r2
 80007be:	000a      	movs	r2, r1
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	401a      	ands	r2, r3
 80007c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	019b      	lsls	r3, r3, #6
 80007ca:	22ff      	movs	r2, #255	; 0xff
 80007cc:	401a      	ands	r2, r3
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0018      	movs	r0, r3
 80007d4:	2303      	movs	r3, #3
 80007d6:	4003      	ands	r3, r0
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007dc:	481f      	ldr	r0, [pc, #124]	; (800085c <__NVIC_SetPriority+0xd4>)
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	089b      	lsrs	r3, r3, #2
 80007e6:	430a      	orrs	r2, r1
 80007e8:	33c0      	adds	r3, #192	; 0xc0
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ee:	e031      	b.n	8000854 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <__NVIC_SetPriority+0xd8>)
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0019      	movs	r1, r3
 80007f8:	230f      	movs	r3, #15
 80007fa:	400b      	ands	r3, r1
 80007fc:	3b08      	subs	r3, #8
 80007fe:	089b      	lsrs	r3, r3, #2
 8000800:	3306      	adds	r3, #6
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	18d3      	adds	r3, r2, r3
 8000806:	3304      	adds	r3, #4
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1dfa      	adds	r2, r7, #7
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	0011      	movs	r1, r2
 8000810:	2203      	movs	r2, #3
 8000812:	400a      	ands	r2, r1
 8000814:	00d2      	lsls	r2, r2, #3
 8000816:	21ff      	movs	r1, #255	; 0xff
 8000818:	4091      	lsls	r1, r2
 800081a:	000a      	movs	r2, r1
 800081c:	43d2      	mvns	r2, r2
 800081e:	401a      	ands	r2, r3
 8000820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	22ff      	movs	r2, #255	; 0xff
 8000828:	401a      	ands	r2, r3
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0018      	movs	r0, r3
 8000830:	2303      	movs	r3, #3
 8000832:	4003      	ands	r3, r0
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <__NVIC_SetPriority+0xd8>)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	001c      	movs	r4, r3
 8000840:	230f      	movs	r3, #15
 8000842:	4023      	ands	r3, r4
 8000844:	3b08      	subs	r3, #8
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	430a      	orrs	r2, r1
 800084a:	3306      	adds	r3, #6
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	18c3      	adds	r3, r0, r3
 8000850:	3304      	adds	r3, #4
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b003      	add	sp, #12
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	045b      	lsls	r3, r3, #17
 8000874:	429a      	cmp	r2, r3
 8000876:	d301      	bcc.n	800087c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000878:	2301      	movs	r3, #1
 800087a:	e010      	b.n	800089e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <SysTick_Config+0x44>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	3a01      	subs	r2, #1
 8000882:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	2103      	movs	r1, #3
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff ff7c 	bl	8000788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Config+0x44>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Config+0x44>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089c:	2300      	movs	r3, #0
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	e000e010 	.word	0xe000e010

080008ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	210f      	movs	r1, #15
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	1c02      	adds	r2, r0, #0
 80008bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff ff5d 	bl	8000788 <__NVIC_SetPriority>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff ffbf 	bl	8000864 <SysTick_Config>
 80008e6:	0003      	movs	r3, r0
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fe:	e147      	b.n	8000b90 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d100      	bne.n	8000918 <HAL_GPIO_Init+0x28>
 8000916:	e138      	b.n	8000b8a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2203      	movs	r2, #3
 800091e:	4013      	ands	r3, r2
 8000920:	2b01      	cmp	r3, #1
 8000922:	d005      	beq.n	8000930 <HAL_GPIO_Init+0x40>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2203      	movs	r2, #3
 800092a:	4013      	ands	r3, r2
 800092c:	2b02      	cmp	r3, #2
 800092e:	d130      	bne.n	8000992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	409a      	lsls	r2, r3
 800093e:	0013      	movs	r3, r2
 8000940:	43da      	mvns	r2, r3
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	409a      	lsls	r2, r3
 8000952:	0013      	movs	r3, r2
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000966:	2201      	movs	r2, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	43da      	mvns	r2, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	2201      	movs	r2, #1
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
 8000984:	0013      	movs	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2203      	movs	r2, #3
 8000998:	4013      	ands	r3, r2
 800099a:	2b03      	cmp	r3, #3
 800099c:	d017      	beq.n	80009ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	43da      	mvns	r2, r3
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	409a      	lsls	r2, r3
 80009c0:	0013      	movs	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2203      	movs	r2, #3
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d123      	bne.n	8000a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	08da      	lsrs	r2, r3, #3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3208      	adds	r2, #8
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	58d3      	ldr	r3, [r2, r3]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	2207      	movs	r2, #7
 80009ec:	4013      	ands	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	691a      	ldr	r2, [r3, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	2107      	movs	r1, #7
 8000a06:	400b      	ands	r3, r1
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	6939      	ldr	r1, [r7, #16]
 8000a20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2203      	movs	r2, #3
 8000a40:	401a      	ands	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	23c0      	movs	r3, #192	; 0xc0
 8000a5c:	029b      	lsls	r3, r3, #10
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d100      	bne.n	8000a64 <HAL_GPIO_Init+0x174>
 8000a62:	e092      	b.n	8000b8a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a64:	4a50      	ldr	r2, [pc, #320]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3318      	adds	r3, #24
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	589b      	ldr	r3, [r3, r2]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	2203      	movs	r2, #3
 8000a76:	4013      	ands	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	220f      	movs	r2, #15
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	0013      	movs	r3, r2
 8000a80:	43da      	mvns	r2, r3
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	23a0      	movs	r3, #160	; 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0x1ca>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a45      	ldr	r2, [pc, #276]	; (8000bac <HAL_GPIO_Init+0x2bc>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d00d      	beq.n	8000ab6 <HAL_GPIO_Init+0x1c6>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a44      	ldr	r2, [pc, #272]	; (8000bb0 <HAL_GPIO_Init+0x2c0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d007      	beq.n	8000ab2 <HAL_GPIO_Init+0x1c2>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <HAL_GPIO_Init+0x2c4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_GPIO_Init+0x1be>
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x1cc>
 8000aae:	2305      	movs	r3, #5
 8000ab0:	e004      	b.n	8000abc <HAL_GPIO_Init+0x1cc>
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	e002      	b.n	8000abc <HAL_GPIO_Init+0x1cc>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <HAL_GPIO_Init+0x1cc>
 8000aba:	2300      	movs	r3, #0
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	2103      	movs	r1, #3
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	00d2      	lsls	r2, r2, #3
 8000ac4:	4093      	lsls	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000acc:	4936      	ldr	r1, [pc, #216]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	3318      	adds	r3, #24
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ada:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	035b      	lsls	r3, r3, #13
 8000af2:	4013      	ands	r3, r2
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	039b      	lsls	r3, r3, #14
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000b30:	2384      	movs	r3, #132	; 0x84
 8000b32:	58d3      	ldr	r3, [r2, r3]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	43da      	mvns	r2, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	029b      	lsls	r3, r3, #10
 8000b48:	4013      	ands	r3, r2
 8000b4a:	d003      	beq.n	8000b54 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b54:	4914      	ldr	r1, [pc, #80]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000b56:	2284      	movs	r2, #132	; 0x84
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	58d3      	ldr	r3, [r2, r3]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43da      	mvns	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	4013      	ands	r3, r2
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b82:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	40da      	lsrs	r2, r3
 8000b98:	1e13      	subs	r3, r2, #0
 8000b9a:	d000      	beq.n	8000b9e <HAL_GPIO_Init+0x2ae>
 8000b9c:	e6b0      	b.n	8000900 <HAL_GPIO_Init+0x10>
  }
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b006      	add	sp, #24
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021800 	.word	0x40021800
 8000bac:	50000400 	.word	0x50000400
 8000bb0:	50000800 	.word	0x50000800
 8000bb4:	50000c00 	.word	0x50000c00

08000bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	0008      	movs	r0, r1
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	1cbb      	adds	r3, r7, #2
 8000bc6:	1c02      	adds	r2, r0, #0
 8000bc8:	801a      	strh	r2, [r3, #0]
 8000bca:	1c7b      	adds	r3, r7, #1
 8000bcc:	1c0a      	adds	r2, r1, #0
 8000bce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bd0:	1c7b      	adds	r3, r7, #1
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d004      	beq.n	8000be2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd8:	1cbb      	adds	r3, r7, #2
 8000bda:	881a      	ldrh	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000be0:	e003      	b.n	8000bea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000be2:	1cbb      	adds	r3, r7, #2
 8000be4:	881a      	ldrh	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	0019      	movs	r1, r3
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d11f      	bne.n	8000c58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	189b      	adds	r3, r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4912      	ldr	r1, [pc, #72]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fa74 	bl	8000114 <__udivsi3>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c32:	e008      	b.n	8000c46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e001      	b.n	8000c46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e009      	b.n	8000c5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c48:	695a      	ldr	r2, [r3, #20]
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d0ed      	beq.n	8000c34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40007000 	.word	0x40007000
 8000c68:	fffff9ff 	.word	0xfffff9ff
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	000f4240 	.word	0x000f4240

08000c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e2f3      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	d100      	bne.n	8000c92 <HAL_RCC_OscConfig+0x1e>
 8000c90:	e07c      	b.n	8000d8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c92:	4bc3      	ldr	r3, [pc, #780]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2238      	movs	r2, #56	; 0x38
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c9c:	4bc0      	ldr	r3, [pc, #768]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b10      	cmp	r3, #16
 8000caa:	d102      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x3e>
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d002      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d10b      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb8:	4bb9      	ldr	r3, [pc, #740]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	029b      	lsls	r3, r3, #10
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d062      	beq.n	8000d8a <HAL_RCC_OscConfig+0x116>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d15e      	bne.n	8000d8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e2ce      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	025b      	lsls	r3, r3, #9
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d107      	bne.n	8000cec <HAL_RCC_OscConfig+0x78>
 8000cdc:	4bb0      	ldr	r3, [pc, #704]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4baf      	ldr	r3, [pc, #700]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	0249      	lsls	r1, r1, #9
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e020      	b.n	8000d2e <HAL_RCC_OscConfig+0xba>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	23a0      	movs	r3, #160	; 0xa0
 8000cf2:	02db      	lsls	r3, r3, #11
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d10e      	bne.n	8000d16 <HAL_RCC_OscConfig+0xa2>
 8000cf8:	4ba9      	ldr	r3, [pc, #676]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4ba8      	ldr	r3, [pc, #672]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	02c9      	lsls	r1, r1, #11
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	4ba6      	ldr	r3, [pc, #664]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4ba5      	ldr	r3, [pc, #660]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0249      	lsls	r1, r1, #9
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	e00b      	b.n	8000d2e <HAL_RCC_OscConfig+0xba>
 8000d16:	4ba2      	ldr	r3, [pc, #648]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4ba1      	ldr	r3, [pc, #644]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	49a1      	ldr	r1, [pc, #644]	; (8000fa4 <HAL_RCC_OscConfig+0x330>)
 8000d1e:	400a      	ands	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	4b9f      	ldr	r3, [pc, #636]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b9e      	ldr	r3, [pc, #632]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d28:	499f      	ldr	r1, [pc, #636]	; (8000fa8 <HAL_RCC_OscConfig+0x334>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d014      	beq.n	8000d60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d36:	f7ff fcf9 	bl	800072c <HAL_GetTick>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d40:	f7ff fcf4 	bl	800072c <HAL_GetTick>
 8000d44:	0002      	movs	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b64      	cmp	r3, #100	; 0x64
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e28d      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d52:	4b93      	ldr	r3, [pc, #588]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	029b      	lsls	r3, r3, #10
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d0f0      	beq.n	8000d40 <HAL_RCC_OscConfig+0xcc>
 8000d5e:	e015      	b.n	8000d8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d60:	f7ff fce4 	bl	800072c <HAL_GetTick>
 8000d64:	0003      	movs	r3, r0
 8000d66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fcdf 	bl	800072c <HAL_GetTick>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b64      	cmp	r3, #100	; 0x64
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e278      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d7c:	4b88      	ldr	r3, [pc, #544]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	d1f0      	bne.n	8000d6a <HAL_RCC_OscConfig+0xf6>
 8000d88:	e000      	b.n	8000d8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2202      	movs	r2, #2
 8000d92:	4013      	ands	r3, r2
 8000d94:	d100      	bne.n	8000d98 <HAL_RCC_OscConfig+0x124>
 8000d96:	e099      	b.n	8000ecc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d98:	4b81      	ldr	r3, [pc, #516]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2238      	movs	r2, #56	; 0x38
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000da2:	4b7f      	ldr	r3, [pc, #508]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	2203      	movs	r2, #3
 8000da8:	4013      	ands	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	2b10      	cmp	r3, #16
 8000db0:	d102      	bne.n	8000db8 <HAL_RCC_OscConfig+0x144>
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d002      	beq.n	8000dbe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d135      	bne.n	8000e2a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dbe:	4b78      	ldr	r3, [pc, #480]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d005      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x162>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e24b      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd6:	4b72      	ldr	r3, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	4a74      	ldr	r2, [pc, #464]	; (8000fac <HAL_RCC_OscConfig+0x338>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	0019      	movs	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	021a      	lsls	r2, r3, #8
 8000de6:	4b6e      	ldr	r3, [pc, #440]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d112      	bne.n	8000e18 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000df2:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a6e      	ldr	r2, [pc, #440]	; (8000fb0 <HAL_RCC_OscConfig+0x33c>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	4b67      	ldr	r3, [pc, #412]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e06:	4b66      	ldr	r3, [pc, #408]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	0adb      	lsrs	r3, r3, #11
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	4013      	ands	r3, r2
 8000e10:	4a68      	ldr	r2, [pc, #416]	; (8000fb4 <HAL_RCC_OscConfig+0x340>)
 8000e12:	40da      	lsrs	r2, r3
 8000e14:	4b68      	ldr	r3, [pc, #416]	; (8000fb8 <HAL_RCC_OscConfig+0x344>)
 8000e16:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x348>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fc29 	bl	8000674 <HAL_InitTick>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d051      	beq.n	8000eca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e221      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d030      	beq.n	8000e94 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e32:	4b5b      	ldr	r3, [pc, #364]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a5e      	ldr	r2, [pc, #376]	; (8000fb0 <HAL_RCC_OscConfig+0x33c>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e46:	4b56      	ldr	r3, [pc, #344]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b55      	ldr	r3, [pc, #340]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	0049      	lsls	r1, r1, #1
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc6a 	bl	800072c <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fc65 	bl	800072c <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e1fe      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e70:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d0f0      	beq.n	8000e5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7c:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	4a4a      	ldr	r2, [pc, #296]	; (8000fac <HAL_RCC_OscConfig+0x338>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	0019      	movs	r1, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	021a      	lsls	r2, r3, #8
 8000e8c:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	e01b      	b.n	8000ecc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000e94:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	4949      	ldr	r1, [pc, #292]	; (8000fc0 <HAL_RCC_OscConfig+0x34c>)
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fc44 	bl	800072c <HAL_GetTick>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fc3f 	bl	800072c <HAL_GetTick>
 8000eae:	0002      	movs	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e1d8      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d1f0      	bne.n	8000eaa <HAL_RCC_OscConfig+0x236>
 8000ec8:	e000      	b.n	8000ecc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d047      	beq.n	8000f66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2238      	movs	r2, #56	; 0x38
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b18      	cmp	r3, #24
 8000ee0:	d10a      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d03c      	beq.n	8000f66 <HAL_RCC_OscConfig+0x2f2>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d138      	bne.n	8000f66 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e1ba      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d019      	beq.n	8000f34 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000f02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fc0e 	bl	800072c <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f16:	f7ff fc09 	bl	800072c <HAL_GetTick>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e1a2      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d0f1      	beq.n	8000f16 <HAL_RCC_OscConfig+0x2a2>
 8000f32:	e018      	b.n	8000f66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000f36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f40:	f7ff fbf4 	bl	800072c <HAL_GetTick>
 8000f44:	0003      	movs	r3, r0
 8000f46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4a:	f7ff fbef 	bl	800072c <HAL_GetTick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e188      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f60:	2202      	movs	r2, #2
 8000f62:	4013      	ands	r3, r2
 8000f64:	d1f1      	bne.n	8000f4a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d100      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2fe>
 8000f70:	e0c6      	b.n	8001100 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f72:	231f      	movs	r3, #31
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2238      	movs	r2, #56	; 0x38
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	d11e      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_RCC_OscConfig+0x32c>)
 8000f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d100      	bne.n	8000f92 <HAL_RCC_OscConfig+0x31e>
 8000f90:	e0b6      	b.n	8001100 <HAL_RCC_OscConfig+0x48c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d000      	beq.n	8000f9c <HAL_RCC_OscConfig+0x328>
 8000f9a:	e0b1      	b.n	8001100 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e166      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	fffeffff 	.word	0xfffeffff
 8000fa8:	fffbffff 	.word	0xfffbffff
 8000fac:	ffff80ff 	.word	0xffff80ff
 8000fb0:	ffffc7ff 	.word	0xffffc7ff
 8000fb4:	00f42400 	.word	0x00f42400
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000fc4:	4bac      	ldr	r3, [pc, #688]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8000fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x360>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_RCC_OscConfig+0x362>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d011      	beq.n	8000ffe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4ba7      	ldr	r3, [pc, #668]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8000fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fde:	4ba6      	ldr	r3, [pc, #664]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	0549      	lsls	r1, r1, #21
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fe8:	4ba3      	ldr	r3, [pc, #652]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8000fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	055b      	lsls	r3, r3, #21
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000ff6:	231f      	movs	r3, #31
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ffe:	4b9f      	ldr	r3, [pc, #636]	; (800127c <HAL_RCC_OscConfig+0x608>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4013      	ands	r3, r2
 8001008:	d11a      	bne.n	8001040 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800100a:	4b9c      	ldr	r3, [pc, #624]	; (800127c <HAL_RCC_OscConfig+0x608>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b9b      	ldr	r3, [pc, #620]	; (800127c <HAL_RCC_OscConfig+0x608>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0049      	lsls	r1, r1, #1
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001018:	f7ff fb88 	bl	800072c <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001022:	f7ff fb83 	bl	800072c <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e11c      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001034:	4b91      	ldr	r3, [pc, #580]	; (800127c <HAL_RCC_OscConfig+0x608>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4013      	ands	r3, r2
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x3e2>
 8001048:	4b8b      	ldr	r3, [pc, #556]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800104a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800104c:	4b8a      	ldr	r3, [pc, #552]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800104e:	2101      	movs	r1, #1
 8001050:	430a      	orrs	r2, r1
 8001052:	65da      	str	r2, [r3, #92]	; 0x5c
 8001054:	e01c      	b.n	8001090 <HAL_RCC_OscConfig+0x41c>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x404>
 800105e:	4b86      	ldr	r3, [pc, #536]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001060:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001062:	4b85      	ldr	r3, [pc, #532]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001064:	2104      	movs	r1, #4
 8001066:	430a      	orrs	r2, r1
 8001068:	65da      	str	r2, [r3, #92]	; 0x5c
 800106a:	4b83      	ldr	r3, [pc, #524]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800106c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800106e:	4b82      	ldr	r3, [pc, #520]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	65da      	str	r2, [r3, #92]	; 0x5c
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0x41c>
 8001078:	4b7f      	ldr	r3, [pc, #508]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800107a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800107c:	4b7e      	ldr	r3, [pc, #504]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800107e:	2101      	movs	r1, #1
 8001080:	438a      	bics	r2, r1
 8001082:	65da      	str	r2, [r3, #92]	; 0x5c
 8001084:	4b7c      	ldr	r3, [pc, #496]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001088:	4b7b      	ldr	r3, [pc, #492]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800108a:	2104      	movs	r1, #4
 800108c:	438a      	bics	r2, r1
 800108e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d014      	beq.n	80010c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fb48 	bl	800072c <HAL_GetTick>
 800109c:	0003      	movs	r3, r0
 800109e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010a0:	e009      	b.n	80010b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fb43 	bl	800072c <HAL_GetTick>
 80010a6:	0002      	movs	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	4a74      	ldr	r2, [pc, #464]	; (8001280 <HAL_RCC_OscConfig+0x60c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e0db      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010b6:	4b70      	ldr	r3, [pc, #448]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80010b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x42e>
 80010c0:	e013      	b.n	80010ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb33 	bl	800072c <HAL_GetTick>
 80010c6:	0003      	movs	r3, r0
 80010c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ca:	e009      	b.n	80010e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010cc:	f7ff fb2e 	bl	800072c <HAL_GetTick>
 80010d0:	0002      	movs	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x60c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e0c6      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010e0:	4b65      	ldr	r3, [pc, #404]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80010e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e4:	2202      	movs	r2, #2
 80010e6:	4013      	ands	r3, r2
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80010ea:	231f      	movs	r3, #31
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d105      	bne.n	8001100 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80010f4:	4b60      	ldr	r3, [pc, #384]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80010f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010f8:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80010fa:	4962      	ldr	r1, [pc, #392]	; (8001284 <HAL_RCC_OscConfig+0x610>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d100      	bne.n	800110a <HAL_RCC_OscConfig+0x496>
 8001108:	e0b0      	b.n	800126c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2238      	movs	r2, #56	; 0x38
 8001110:	4013      	ands	r3, r2
 8001112:	2b10      	cmp	r3, #16
 8001114:	d100      	bne.n	8001118 <HAL_RCC_OscConfig+0x4a4>
 8001116:	e078      	b.n	800120a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d153      	bne.n	80011c8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001120:	4b55      	ldr	r3, [pc, #340]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b54      	ldr	r3, [pc, #336]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001126:	4958      	ldr	r1, [pc, #352]	; (8001288 <HAL_RCC_OscConfig+0x614>)
 8001128:	400a      	ands	r2, r1
 800112a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112c:	f7ff fafe 	bl	800072c <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff faf9 	bl	800072c <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e092      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001148:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	049b      	lsls	r3, r3, #18
 8001150:	4013      	ands	r3, r2
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001154:	4b48      	ldr	r3, [pc, #288]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4a4c      	ldr	r2, [pc, #304]	; (800128c <HAL_RCC_OscConfig+0x618>)
 800115a:	4013      	ands	r3, r2
 800115c:	0019      	movs	r1, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1a      	ldr	r2, [r3, #32]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	431a      	orrs	r2, r3
 800117c:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 800117e:	430a      	orrs	r2, r1
 8001180:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0449      	lsls	r1, r1, #17
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001190:	4b39      	ldr	r3, [pc, #228]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	4b38      	ldr	r3, [pc, #224]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	0549      	lsls	r1, r1, #21
 800119a:	430a      	orrs	r2, r1
 800119c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fac5 	bl	800072c <HAL_GetTick>
 80011a2:	0003      	movs	r3, r0
 80011a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a8:	f7ff fac0 	bl	800072c <HAL_GetTick>
 80011ac:	0002      	movs	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e059      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011ba:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	049b      	lsls	r3, r3, #18
 80011c2:	4013      	ands	r3, r2
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x534>
 80011c6:	e051      	b.n	800126c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80011ce:	492e      	ldr	r1, [pc, #184]	; (8001288 <HAL_RCC_OscConfig+0x614>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff faaa 	bl	800072c <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011de:	f7ff faa5 	bl	800072c <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e03e      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	049b      	lsls	r3, r3, #18
 80011f8:	4013      	ands	r3, r2
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001202:	4923      	ldr	r1, [pc, #140]	; (8001290 <HAL_RCC_OscConfig+0x61c>)
 8001204:	400a      	ands	r2, r1
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	e030      	b.n	800126c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e02b      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <HAL_RCC_OscConfig+0x604>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2203      	movs	r2, #3
 8001220:	401a      	ands	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	429a      	cmp	r2, r3
 8001228:	d11e      	bne.n	8001268 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2270      	movs	r2, #112	; 0x70
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001234:	429a      	cmp	r2, r3
 8001236:	d117      	bne.n	8001268 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	23fe      	movs	r3, #254	; 0xfe
 800123c:	01db      	lsls	r3, r3, #7
 800123e:	401a      	ands	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001246:	429a      	cmp	r2, r3
 8001248:	d10e      	bne.n	8001268 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	23f8      	movs	r3, #248	; 0xf8
 800124e:	039b      	lsls	r3, r3, #14
 8001250:	401a      	ands	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001256:	429a      	cmp	r2, r3
 8001258:	d106      	bne.n	8001268 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	0f5b      	lsrs	r3, r3, #29
 800125e:	075a      	lsls	r2, r3, #29
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b008      	add	sp, #32
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	40021000 	.word	0x40021000
 800127c:	40007000 	.word	0x40007000
 8001280:	00001388 	.word	0x00001388
 8001284:	efffffff 	.word	0xefffffff
 8001288:	feffffff 	.word	0xfeffffff
 800128c:	1fc1808c 	.word	0x1fc1808c
 8001290:	effefffc 	.word	0xeffefffc

08001294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0e9      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a8:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_ClockConfig+0x1f0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2207      	movs	r2, #7
 80012ae:	4013      	ands	r3, r2
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d91e      	bls.n	80012f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b73      	ldr	r3, [pc, #460]	; (8001484 <HAL_RCC_ClockConfig+0x1f0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2207      	movs	r2, #7
 80012bc:	4393      	bics	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	4b70      	ldr	r3, [pc, #448]	; (8001484 <HAL_RCC_ClockConfig+0x1f0>)
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012c8:	f7ff fa30 	bl	800072c <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012d0:	e009      	b.n	80012e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d2:	f7ff fa2b 	bl	800072c <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	4a6a      	ldr	r2, [pc, #424]	; (8001488 <HAL_RCC_ClockConfig+0x1f4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e0ca      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012e6:	4b67      	ldr	r3, [pc, #412]	; (8001484 <HAL_RCC_ClockConfig+0x1f0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2207      	movs	r2, #7
 80012ec:	4013      	ands	r3, r2
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1ee      	bne.n	80012d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2202      	movs	r2, #2
 80012fa:	4013      	ands	r3, r2
 80012fc:	d015      	beq.n	800132a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2204      	movs	r2, #4
 8001304:	4013      	ands	r3, r2
 8001306:	d006      	beq.n	8001316 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001308:	4b60      	ldr	r3, [pc, #384]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	4b5f      	ldr	r3, [pc, #380]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 800130e:	21e0      	movs	r1, #224	; 0xe0
 8001310:	01c9      	lsls	r1, r1, #7
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001316:	4b5d      	ldr	r3, [pc, #372]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4a5d      	ldr	r2, [pc, #372]	; (8001490 <HAL_RCC_ClockConfig+0x1fc>)
 800131c:	4013      	ands	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2201      	movs	r2, #1
 8001330:	4013      	ands	r3, r2
 8001332:	d057      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d107      	bne.n	800134c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133c:	4b53      	ldr	r3, [pc, #332]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4013      	ands	r3, r2
 8001346:	d12b      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e097      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d107      	bne.n	8001364 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001354:	4b4d      	ldr	r3, [pc, #308]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	049b      	lsls	r3, r3, #18
 800135c:	4013      	ands	r3, r2
 800135e:	d11f      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e08b      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800136c:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4013      	ands	r3, r2
 8001376:	d113      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e07f      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d106      	bne.n	8001392 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001384:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 8001386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001388:	2202      	movs	r2, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d108      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e074      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 8001394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001396:	2202      	movs	r2, #2
 8001398:	4013      	ands	r3, r2
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e06d      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013a0:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2207      	movs	r2, #7
 80013a6:	4393      	bics	r3, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013b4:	f7ff f9ba 	bl	800072c <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013bc:	e009      	b.n	80013d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013be:	f7ff f9b5 	bl	800072c <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <HAL_RCC_ClockConfig+0x1f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e054      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2238      	movs	r2, #56	; 0x38
 80013d8:	401a      	ands	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d1ec      	bne.n	80013be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_RCC_ClockConfig+0x1f0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2207      	movs	r2, #7
 80013ea:	4013      	ands	r3, r2
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d21e      	bcs.n	8001430 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_ClockConfig+0x1f0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2207      	movs	r2, #7
 80013f8:	4393      	bics	r3, r2
 80013fa:	0019      	movs	r1, r3
 80013fc:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_RCC_ClockConfig+0x1f0>)
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001404:	f7ff f992 	bl	800072c <HAL_GetTick>
 8001408:	0003      	movs	r3, r0
 800140a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800140c:	e009      	b.n	8001422 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140e:	f7ff f98d 	bl	800072c <HAL_GetTick>
 8001412:	0002      	movs	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <HAL_RCC_ClockConfig+0x1f4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e02c      	b.n	800147c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_RCC_ClockConfig+0x1f0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2207      	movs	r2, #7
 8001428:	4013      	ands	r3, r2
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d1ee      	bne.n	800140e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2204      	movs	r2, #4
 8001436:	4013      	ands	r3, r2
 8001438:	d009      	beq.n	800144e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <HAL_RCC_ClockConfig+0x200>)
 8001440:	4013      	ands	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 800144a:	430a      	orrs	r2, r1
 800144c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800144e:	f000 f829 	bl	80014a4 <HAL_RCC_GetSysClockFreq>
 8001452:	0001      	movs	r1, r0
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_RCC_ClockConfig+0x1f8>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	220f      	movs	r2, #15
 800145c:	401a      	ands	r2, r3
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_RCC_ClockConfig+0x204>)
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	58d3      	ldr	r3, [r2, r3]
 8001464:	221f      	movs	r2, #31
 8001466:	4013      	ands	r3, r2
 8001468:	000a      	movs	r2, r1
 800146a:	40da      	lsrs	r2, r3
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_ClockConfig+0x208>)
 800146e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_ClockConfig+0x20c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff f8fd 	bl	8000674 <HAL_InitTick>
 800147a:	0003      	movs	r3, r0
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b004      	add	sp, #16
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40022000 	.word	0x40022000
 8001488:	00001388 	.word	0x00001388
 800148c:	40021000 	.word	0x40021000
 8001490:	fffff0ff 	.word	0xfffff0ff
 8001494:	ffff8fff 	.word	0xffff8fff
 8001498:	08002488 	.word	0x08002488
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2238      	movs	r2, #56	; 0x38
 80014b0:	4013      	ands	r3, r2
 80014b2:	d10f      	bne.n	80014d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0adb      	lsrs	r3, r3, #11
 80014ba:	2207      	movs	r2, #7
 80014bc:	4013      	ands	r3, r2
 80014be:	2201      	movs	r2, #1
 80014c0:	409a      	lsls	r2, r3
 80014c2:	0013      	movs	r3, r2
 80014c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	4835      	ldr	r0, [pc, #212]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014ca:	f7fe fe23 	bl	8000114 <__udivsi3>
 80014ce:	0003      	movs	r3, r0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	e05d      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2238      	movs	r2, #56	; 0x38
 80014da:	4013      	ands	r3, r2
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	e054      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2238      	movs	r2, #56	; 0x38
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d138      	bne.n	8001564 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2203      	movs	r2, #3
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	2207      	movs	r2, #7
 8001504:	4013      	ands	r3, r2
 8001506:	3301      	adds	r3, #1
 8001508:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d10d      	bne.n	800152c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	4824      	ldr	r0, [pc, #144]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001514:	f7fe fdfe 	bl	8000114 <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	0019      	movs	r1, r3
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	227f      	movs	r2, #127	; 0x7f
 8001524:	4013      	ands	r3, r2
 8001526:	434b      	muls	r3, r1
 8001528:	617b      	str	r3, [r7, #20]
        break;
 800152a:	e00d      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	481c      	ldr	r0, [pc, #112]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001530:	f7fe fdf0 	bl	8000114 <__udivsi3>
 8001534:	0003      	movs	r3, r0
 8001536:	0019      	movs	r1, r3
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	227f      	movs	r2, #127	; 0x7f
 8001540:	4013      	ands	r3, r2
 8001542:	434b      	muls	r3, r1
 8001544:	617b      	str	r3, [r7, #20]
        break;
 8001546:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0f5b      	lsrs	r3, r3, #29
 800154e:	2207      	movs	r2, #7
 8001550:	4013      	ands	r3, r2
 8001552:	3301      	adds	r3, #1
 8001554:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f7fe fddb 	bl	8000114 <__udivsi3>
 800155e:	0003      	movs	r3, r0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	e015      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2238      	movs	r2, #56	; 0x38
 800156a:	4013      	ands	r3, r2
 800156c:	2b20      	cmp	r3, #32
 800156e:	d103      	bne.n	8001578 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	e00b      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_RCC_GetSysClockFreq+0xf8>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2238      	movs	r2, #56	; 0x38
 800157e:	4013      	ands	r3, r2
 8001580:	2b18      	cmp	r3, #24
 8001582:	d103      	bne.n	800158c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001584:	23fa      	movs	r3, #250	; 0xfa
 8001586:	01db      	lsls	r3, r3, #7
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	e001      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001590:	693b      	ldr	r3, [r7, #16]
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b006      	add	sp, #24
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40021000 	.word	0x40021000
 80015a0:	00f42400 	.word	0x00f42400
 80015a4:	007a1200 	.word	0x007a1200

080015a8 <latch>:
const uint8_t ROW_20[] = {0x00, 0x40, 0x14, 0x54};

/*****************************************************************/


void latch(lcd_t * const lcd) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_RESET );
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8a1b      	ldrh	r3, [r3, #16]
 80015b8:	2200      	movs	r2, #0
 80015ba:	0019      	movs	r1, r3
 80015bc:	f7ff fafc 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_SET );
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	8a1b      	ldrh	r3, [r3, #16]
 80015c8:	2201      	movs	r2, #1
 80015ca:	0019      	movs	r1, r3
 80015cc:	f7ff faf4 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_SET );
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8a1b      	ldrh	r3, [r3, #16]
 80015d8:	2201      	movs	r2, #1
 80015da:	0019      	movs	r1, r3
 80015dc:	f7ff faec 	bl	8000bb8 <HAL_GPIO_WritePin>



}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <send_nibble_to_lcd>:



void send_nibble_to_lcd(lcd_t * const lcd,uint8_t nibble,uint8_t rs) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	0008      	movs	r0, r1
 80015f2:	0011      	movs	r1, r2
 80015f4:	1cfb      	adds	r3, r7, #3
 80015f6:	1c02      	adds	r2, r0, #0
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	1cbb      	adds	r3, r7, #2
 80015fc:	1c0a      	adds	r2, r1, #0
 80015fe:	701a      	strb	r2, [r3, #0]


	HAL_GPIO_WritePin(lcd->RS_PORT,lcd->RS_PIN, rs);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	8a99      	ldrh	r1, [r3, #20]
 8001608:	1cbb      	adds	r3, r7, #2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	001a      	movs	r2, r3
 800160e:	f7ff fad3 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D7_PORT,lcd->D7_PIN, ((nibble >> 3) & 0x01));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6998      	ldr	r0, [r3, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8819      	ldrh	r1, [r3, #0]
 800161a:	1cfb      	adds	r3, r7, #3
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2201      	movs	r2, #1
 8001624:	4013      	ands	r3, r2
 8001626:	b2db      	uxtb	r3, r3
 8001628:	001a      	movs	r2, r3
 800162a:	f7ff fac5 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_PORT,lcd->D6_PIN, ((nibble >> 2) & 0x01));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69d8      	ldr	r0, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	8859      	ldrh	r1, [r3, #2]
 8001636:	1cfb      	adds	r3, r7, #3
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	b2db      	uxtb	r3, r3
 8001644:	001a      	movs	r2, r3
 8001646:	f7ff fab7 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_PORT,lcd->D5_PIN, ((nibble >> 1) & 0x01));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a18      	ldr	r0, [r3, #32]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	8899      	ldrh	r1, [r3, #4]
 8001652:	1cfb      	adds	r3, r7, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	001a      	movs	r2, r3
 8001662:	f7ff faa9 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_PORT,lcd->D4_PIN, ((nibble >> 0) & 0x01));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	88d9      	ldrh	r1, [r3, #6]
 800166e:	1cfb      	adds	r3, r7, #3
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2201      	movs	r2, #1
 8001674:	4013      	ands	r3, r2
 8001676:	b2db      	uxtb	r3, r3
 8001678:	001a      	movs	r2, r3
 800167a:	f7ff fa9d 	bl	8000bb8 <HAL_GPIO_WritePin>
	latch(lcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff ff91 	bl	80015a8 <latch>


}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}

0800168e <send_to_lcd>:

void send_to_lcd(lcd_t * const lcd,uint8_t nibble,uint8_t rs) {
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	0008      	movs	r0, r1
 8001698:	0011      	movs	r1, r2
 800169a:	1cfb      	adds	r3, r7, #3
 800169c:	1c02      	adds	r2, r0, #0
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	1cbb      	adds	r3, r7, #2
 80016a2:	1c0a      	adds	r2, r1, #0
 80016a4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(lcd->RS_PORT,lcd->RS_PIN , rs);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	8a99      	ldrh	r1, [r3, #20]
 80016ae:	1cbb      	adds	r3, r7, #2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	001a      	movs	r2, r3
 80016b4:	f7ff fa80 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D7_PORT,lcd->D7_PIN, ((nibble >> 7) & 0x01));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6998      	ldr	r0, [r3, #24]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8819      	ldrh	r1, [r3, #0]
 80016c0:	1cfb      	adds	r3, r7, #3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	001a      	movs	r2, r3
 80016ca:	f7ff fa75 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_PORT,lcd->D6_PIN, ((nibble >> 6) & 0x01));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69d8      	ldr	r0, [r3, #28]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8859      	ldrh	r1, [r3, #2]
 80016d6:	1cfb      	adds	r3, r7, #3
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2201      	movs	r2, #1
 80016e0:	4013      	ands	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	001a      	movs	r2, r3
 80016e6:	f7ff fa67 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_PORT,lcd->D5_PIN, ((nibble >> 5) & 0x01));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a18      	ldr	r0, [r3, #32]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8899      	ldrh	r1, [r3, #4]
 80016f2:	1cfb      	adds	r3, r7, #3
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2201      	movs	r2, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	001a      	movs	r2, r3
 8001702:	f7ff fa59 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_PORT,lcd->D4_PIN, ((nibble >> 4) & 0x01));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	88d9      	ldrh	r1, [r3, #6]
 800170e:	1cfb      	adds	r3, r7, #3
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2201      	movs	r2, #1
 8001718:	4013      	ands	r3, r2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	001a      	movs	r2, r3
 800171e:	f7ff fa4b 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D3_PORT,lcd->D3_PIN, ((nibble >> 3) & 0x01));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	8919      	ldrh	r1, [r3, #8]
 800172a:	1cfb      	adds	r3, r7, #3
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2201      	movs	r2, #1
 8001734:	4013      	ands	r3, r2
 8001736:	b2db      	uxtb	r3, r3
 8001738:	001a      	movs	r2, r3
 800173a:	f7ff fa3d 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D2_PORT,lcd->D2_PIN, ((nibble >> 2) & 0x01));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	8959      	ldrh	r1, [r3, #10]
 8001746:	1cfb      	adds	r3, r7, #3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	001a      	movs	r2, r3
 8001756:	f7ff fa2f 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D1_PORT,lcd->D1_PIN, ((nibble >> 1) & 0x01));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8999      	ldrh	r1, [r3, #12]
 8001762:	1cfb      	adds	r3, r7, #3
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2201      	movs	r2, #1
 800176c:	4013      	ands	r3, r2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	001a      	movs	r2, r3
 8001772:	f7ff fa21 	bl	8000bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D0_PORT,lcd->D0_PIN, ((nibble>>	0) & 0x01));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	89d9      	ldrh	r1, [r3, #14]
 800177e:	1cfb      	adds	r3, r7, #3
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2201      	movs	r2, #1
 8001784:	4013      	ands	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	001a      	movs	r2, r3
 800178a:	f7ff fa15 	bl	8000bb8 <HAL_GPIO_WritePin>
	latch(lcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff ff09 	bl	80015a8 <latch>

}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}

0800179e <lcd_create_4_bit>:

lcd_t lcd_create_4_bit(	GPIO_TypeDef * RS_PORT,GPIO_TypeDef * RW_PORT,GPIO_TypeDef * E_PORT,
						uint16_t RS_PIN,uint16_t RW_PIN,uint16_t E_PIN,
						GPIO_TypeDef * D7_PORT,GPIO_TypeDef * D6_PORT,GPIO_TypeDef * D5_PORT,GPIO_TypeDef * D4_PORT,
						uint16_t D7_PIN,uint16_t D6_PIN,uint16_t D5_PIN,uint16_t D4_PIN,uint8_t character)
{
 800179e:	b590      	push	{r4, r7, lr}
 80017a0:	b097      	sub	sp, #92	; 0x5c
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
	lcd_t config_lcd;
	config_lcd.D7_PORT=D7_PORT;
 80017ac:	2010      	movs	r0, #16
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017b2:	619a      	str	r2, [r3, #24]
	config_lcd.D6_PORT=D6_PORT;
 80017b4:	183b      	adds	r3, r7, r0
 80017b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80017b8:	61da      	str	r2, [r3, #28]
	config_lcd.D5_PORT=D5_PORT;
 80017ba:	183b      	adds	r3, r7, r0
 80017bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017be:	621a      	str	r2, [r3, #32]
	config_lcd.D4_PORT=D4_PORT;
 80017c0:	183b      	adds	r3, r7, r0
 80017c2:	2480      	movs	r4, #128	; 0x80
 80017c4:	193a      	adds	r2, r7, r4
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
	config_lcd.RS_PORT=RS_PORT;
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
	config_lcd.RW_PORT=RW_PORT;
 80017d0:	183b      	adds	r3, r7, r0
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	63da      	str	r2, [r3, #60]	; 0x3c
	config_lcd.EN_PORT=E_PORT;
 80017d6:	183b      	adds	r3, r7, r0
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	639a      	str	r2, [r3, #56]	; 0x38
	config_lcd.D7_PIN=D7_PIN;
 80017dc:	183b      	adds	r3, r7, r0
 80017de:	227c      	movs	r2, #124	; 0x7c
 80017e0:	2108      	movs	r1, #8
 80017e2:	1852      	adds	r2, r2, r1
 80017e4:	19d2      	adds	r2, r2, r7
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	801a      	strh	r2, [r3, #0]
	config_lcd.D6_PIN=D6_PIN;
 80017ea:	183b      	adds	r3, r7, r0
 80017ec:	0022      	movs	r2, r4
 80017ee:	1852      	adds	r2, r2, r1
 80017f0:	19d2      	adds	r2, r2, r7
 80017f2:	8812      	ldrh	r2, [r2, #0]
 80017f4:	805a      	strh	r2, [r3, #2]
	config_lcd.D5_PIN=D5_PIN;
 80017f6:	183b      	adds	r3, r7, r0
 80017f8:	2284      	movs	r2, #132	; 0x84
 80017fa:	1852      	adds	r2, r2, r1
 80017fc:	19d2      	adds	r2, r2, r7
 80017fe:	8812      	ldrh	r2, [r2, #0]
 8001800:	809a      	strh	r2, [r3, #4]
	config_lcd.D4_PIN=D4_PIN;
 8001802:	183b      	adds	r3, r7, r0
 8001804:	2288      	movs	r2, #136	; 0x88
 8001806:	1852      	adds	r2, r2, r1
 8001808:	19d2      	adds	r2, r2, r7
 800180a:	8812      	ldrh	r2, [r2, #0]
 800180c:	80da      	strh	r2, [r3, #6]
	config_lcd.RS_PIN=RS_PIN;
 800180e:	183a      	adds	r2, r7, r0
 8001810:	2460      	movs	r4, #96	; 0x60
 8001812:	1863      	adds	r3, r4, r1
 8001814:	19db      	adds	r3, r3, r7
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	8293      	strh	r3, [r2, #20]
	config_lcd.RW_PIN=RW_PIN;
 800181a:	183b      	adds	r3, r7, r0
 800181c:	2264      	movs	r2, #100	; 0x64
 800181e:	1852      	adds	r2, r2, r1
 8001820:	19d2      	adds	r2, r2, r7
 8001822:	8812      	ldrh	r2, [r2, #0]
 8001824:	825a      	strh	r2, [r3, #18]
	config_lcd.EN_PIN=E_PIN;
 8001826:	183b      	adds	r3, r7, r0
 8001828:	2268      	movs	r2, #104	; 0x68
 800182a:	1852      	adds	r2, r2, r1
 800182c:	19d2      	adds	r2, r2, r7
 800182e:	8812      	ldrh	r2, [r2, #0]
 8001830:	821a      	strh	r2, [r3, #16]
	config_lcd.BIT_MODE=lcd_mode_4_bit;//desing lcd in 4 bit mode
 8001832:	183b      	adds	r3, r7, r0
 8001834:	2246      	movs	r2, #70	; 0x46
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
	config_lcd.CHARACTER_TYPE=character;//desing if the lcd is 16x2 or 20x4.
 800183a:	183b      	adds	r3, r7, r0
 800183c:	222c      	movs	r2, #44	; 0x2c
 800183e:	1912      	adds	r2, r2, r4
 8001840:	2108      	movs	r1, #8
 8001842:	468c      	mov	ip, r1
 8001844:	44bc      	add	ip, r7
 8001846:	4462      	add	r2, ip
 8001848:	2147      	movs	r1, #71	; 0x47
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	545a      	strb	r2, [r3, r1]

	//you have to make the init of the lcd
	lcd_init(&config_lcd);//init the lcd
 800184e:	0004      	movs	r4, r0
 8001850:	183b      	adds	r3, r7, r0
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f80c 	bl	8001870 <lcd_init>

	return config_lcd;//return the configuration of the lcd
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	193b      	adds	r3, r7, r4
 800185c:	0010      	movs	r0, r2
 800185e:	0019      	movs	r1, r3
 8001860:	2348      	movs	r3, #72	; 0x48
 8001862:	001a      	movs	r2, r3
 8001864:	f000 f97e 	bl	8001b64 <memcpy>
}
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	46bd      	mov	sp, r7
 800186c:	b017      	add	sp, #92	; 0x5c
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <lcd_init>:

/* function to init lcd
 * object have all the pin that you cand work
 *also receive the pinmode, 4 bits and 8 bits. */
void lcd_init(lcd_t *const lcd)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RS_PORT, lcd->RS_PIN, lcd_write_mode);//set to write mode
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	8a9b      	ldrh	r3, [r3, #20]
 8001880:	2200      	movs	r2, #0
 8001882:	0019      	movs	r1, r3
 8001884:	f7ff f998 	bl	8000bb8 <HAL_GPIO_WritePin>

	//check if the lcd are 4 bit mode or 8 bit mode
	if(lcd->BIT_MODE == lcd_mode_4_bit)//for 4 bit mode
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2246      	movs	r2, #70	; 0x46
 800188c:	5c9b      	ldrb	r3, [r3, r2]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d12d      	bne.n	80018ee <lcd_init+0x7e>
	{
		lcd_send_command(lcd, 0X00);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2100      	movs	r1, #0
 8001896:	0018      	movs	r0, r3
 8001898:	f000 f89f 	bl	80019da <lcd_send_command>
		HAL_Delay(100);
 800189c:	2064      	movs	r0, #100	; 0x64
 800189e:	f7fe ff4f 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x28);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2128      	movs	r1, #40	; 0x28
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 f897 	bl	80019da <lcd_send_command>
		lcd_send_command(lcd, 0x28);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2128      	movs	r1, #40	; 0x28
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 f892 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 80018b6:	201e      	movs	r0, #30
 80018b8:	f7fe ff42 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x06);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2106      	movs	r1, #6
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 f88a 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 80018c6:	201e      	movs	r0, #30
 80018c8:	f7fe ff3a 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x0C);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	210c      	movs	r1, #12
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 f882 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 80018d6:	201e      	movs	r0, #30
 80018d8:	f7fe ff32 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x01);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2101      	movs	r1, #1
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 f87a 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 80018e6:	201e      	movs	r0, #30
 80018e8:	f7fe ff2a 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, CLEAR_DISPLAY);
		HAL_Delay(30);

	}

}
 80018ec:	e037      	b.n	800195e <lcd_init+0xee>
		lcd_send_command(lcd, 0X00);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2100      	movs	r1, #0
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 f871 	bl	80019da <lcd_send_command>
		HAL_Delay(100);
 80018f8:	2064      	movs	r0, #100	; 0x64
 80018fa:	f7fe ff21 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x38);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2138      	movs	r1, #56	; 0x38
 8001902:	0018      	movs	r0, r3
 8001904:	f000 f869 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 8001908:	201e      	movs	r0, #30
 800190a:	f7fe ff19 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x06);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2106      	movs	r1, #6
 8001912:	0018      	movs	r0, r3
 8001914:	f000 f861 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 8001918:	201e      	movs	r0, #30
 800191a:	f7fe ff11 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x0C);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	210c      	movs	r1, #12
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f859 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 8001928:	201e      	movs	r0, #30
 800192a:	f7fe ff09 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x01);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2101      	movs	r1, #1
 8001932:	0018      	movs	r0, r3
 8001934:	f000 f851 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 8001938:	201e      	movs	r0, #30
 800193a:	f7fe ff01 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, 0x02);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2102      	movs	r1, #2
 8001942:	0018      	movs	r0, r3
 8001944:	f000 f849 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 8001948:	201e      	movs	r0, #30
 800194a:	f7fe fef9 	bl	8000740 <HAL_Delay>
		lcd_send_command(lcd, CLEAR_DISPLAY);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2101      	movs	r1, #1
 8001952:	0018      	movs	r0, r3
 8001954:	f000 f841 	bl	80019da <lcd_send_command>
		HAL_Delay(30);
 8001958:	201e      	movs	r0, #30
 800195a:	f7fe fef1 	bl	8000740 <HAL_Delay>
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}

08001966 <lcd_send_data>:


/*Function to send data to the lcd
 * receive the object lcd and the data byte*/
void lcd_send_data(lcd_t * const lcd,uint8_t data)
{
 8001966:	b590      	push	{r4, r7, lr}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	000a      	movs	r2, r1
 8001970:	1cfb      	adds	r3, r7, #3
 8001972:	701a      	strb	r2, [r3, #0]
	uint8_t dataSend;
	if(lcd->BIT_MODE == lcd_mode_4_bit)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2246      	movs	r2, #70	; 0x46
 8001978:	5c9b      	ldrb	r3, [r3, r2]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d11f      	bne.n	80019be <lcd_send_data+0x58>
		//for 4 bits mode lcd
	{
		dataSend=((data>>4)&0x0f);
 800197e:	200f      	movs	r0, #15
 8001980:	183b      	adds	r3, r7, r0
 8001982:	1cfa      	adds	r2, r7, #3
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	0912      	lsrs	r2, r2, #4
 8001988:	701a      	strb	r2, [r3, #0]
		send_nibble_to_lcd(lcd, dataSend, lcd_data_mode);
 800198a:	0004      	movs	r4, r0
 800198c:	183b      	adds	r3, r7, r0
 800198e:	7819      	ldrb	r1, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff fe27 	bl	80015e8 <send_nibble_to_lcd>
		dataSend=((data)&0x0f);
 800199a:	0020      	movs	r0, r4
 800199c:	183b      	adds	r3, r7, r0
 800199e:	1cfa      	adds	r2, r7, #3
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	210f      	movs	r1, #15
 80019a4:	400a      	ands	r2, r1
 80019a6:	701a      	strb	r2, [r3, #0]
		send_nibble_to_lcd(lcd, dataSend, lcd_data_mode);
 80019a8:	183b      	adds	r3, r7, r0
 80019aa:	7819      	ldrb	r1, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff fe19 	bl	80015e8 <send_nibble_to_lcd>
		HAL_Delay(1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7fe fec2 	bl	8000740 <HAL_Delay>
		HAL_Delay(1);

	}


}
 80019bc:	e009      	b.n	80019d2 <lcd_send_data+0x6c>
		send_to_lcd(lcd, data, lcd_data_mode);
 80019be:	1cfb      	adds	r3, r7, #3
 80019c0:	7819      	ldrb	r1, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7ff fe61 	bl	800168e <send_to_lcd>
		HAL_Delay(1);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7fe feb7 	bl	8000740 <HAL_Delay>
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b005      	add	sp, #20
 80019d8:	bd90      	pop	{r4, r7, pc}

080019da <lcd_send_command>:
/*Function to send command to the lcd
 * receive the object lcd and the data byte*/
void lcd_send_command(lcd_t * const lcd, uint8_t command)
{
 80019da:	b590      	push	{r4, r7, lr}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	000a      	movs	r2, r1
 80019e4:	1cfb      	adds	r3, r7, #3
 80019e6:	701a      	strb	r2, [r3, #0]
	uint8_t dataSend;
	if(lcd->BIT_MODE == lcd_mode_4_bit)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2246      	movs	r2, #70	; 0x46
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d11f      	bne.n	8001a32 <lcd_send_command+0x58>
		//for 4 bits mode lcd
	{
		dataSend=((command>>4)&0x0f);
 80019f2:	200f      	movs	r0, #15
 80019f4:	183b      	adds	r3, r7, r0
 80019f6:	1cfa      	adds	r2, r7, #3
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	0912      	lsrs	r2, r2, #4
 80019fc:	701a      	strb	r2, [r3, #0]
		send_nibble_to_lcd(lcd, dataSend, lcd_command_mode);
 80019fe:	0004      	movs	r4, r0
 8001a00:	183b      	adds	r3, r7, r0
 8001a02:	7819      	ldrb	r1, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fded 	bl	80015e8 <send_nibble_to_lcd>
		dataSend=((command)&0x0f);
 8001a0e:	0020      	movs	r0, r4
 8001a10:	183b      	adds	r3, r7, r0
 8001a12:	1cfa      	adds	r2, r7, #3
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	210f      	movs	r1, #15
 8001a18:	400a      	ands	r2, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
		send_nibble_to_lcd(lcd, dataSend, lcd_command_mode);
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	7819      	ldrb	r1, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff fddf 	bl	80015e8 <send_nibble_to_lcd>
		HAL_Delay(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f7fe fe88 	bl	8000740 <HAL_Delay>
		//for 8 bits lcd
		send_to_lcd(lcd, command, lcd_command_mode);
		HAL_Delay(1);

	}
}
 8001a30:	e009      	b.n	8001a46 <lcd_send_command+0x6c>
		send_to_lcd(lcd, command, lcd_command_mode);
 8001a32:	1cfb      	adds	r3, r7, #3
 8001a34:	7819      	ldrb	r1, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7ff fe27 	bl	800168e <send_to_lcd>
		HAL_Delay(1);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7fe fe7d 	bl	8000740 <HAL_Delay>
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b005      	add	sp, #20
 8001a4c:	bd90      	pop	{r4, r7, pc}
	...

08001a50 <lcd_set_cursor>:

}
/*function to set position cursor
 * receive the object lcd, the row and the col*/
void lcd_set_cursor(lcd_t * const lcd,uint8_t row, uint8_t col)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	0008      	movs	r0, r1
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	1cfb      	adds	r3, r7, #3
 8001a5e:	1c02      	adds	r2, r0, #0
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	1cbb      	adds	r3, r7, #2
 8001a64:	1c0a      	adds	r2, r1, #0
 8001a66:	701a      	strb	r2, [r3, #0]

if(lcd->CHARACTER_TYPE==lcd_chr_16x2_mode)//if the lcd is 16x2 mode
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2247      	movs	r2, #71	; 0x47
 8001a6c:	5c9b      	ldrb	r3, [r3, r2]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10f      	bne.n	8001a92 <lcd_set_cursor+0x42>
{

	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_16[row]+col);
 8001a72:	1cfb      	adds	r3, r7, #3
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <lcd_set_cursor+0x68>)
 8001a78:	5cd2      	ldrb	r2, [r2, r3]
 8001a7a:	1cbb      	adds	r3, r7, #2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	18d3      	adds	r3, r2, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	3b80      	subs	r3, #128	; 0x80
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0011      	movs	r1, r2
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff ffa5 	bl	80019da <lcd_send_command>
{
	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_20[row]+col);
}


}
 8001a90:	e00e      	b.n	8001ab0 <lcd_set_cursor+0x60>
	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_20[row]+col);
 8001a92:	1cfb      	adds	r3, r7, #3
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <lcd_set_cursor+0x6c>)
 8001a98:	5cd2      	ldrb	r2, [r2, r3]
 8001a9a:	1cbb      	adds	r3, r7, #2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	18d3      	adds	r3, r2, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3b80      	subs	r3, #128	; 0x80
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff ff95 	bl	80019da <lcd_send_command>
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	080024c8 	.word	0x080024c8
 8001abc:	080024cc 	.word	0x080024cc

08001ac0 <lcd_print_string>:

/*function to print string
 * receive the lcd object and the string*/
void lcd_print_string(lcd_t * const lcd,char *str)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]

	while(*str)
 8001aca:	e008      	b.n	8001ade <lcd_print_string+0x1e>
	{

		lcd_send_data(lcd, *str++);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	603a      	str	r2, [r7, #0]
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff ff44 	bl	8001966 <lcd_send_data>
	while(*str)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f2      	bne.n	8001acc <lcd_print_string+0xc>


	}

}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <lcd_clear>:


//funciones complementarias
void lcd_clear(lcd_t * const lcd)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
lcd_send_command(lcd, CLEAR_DISPLAY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2101      	movs	r1, #1
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff ff6c 	bl	80019da <lcd_send_command>
HAL_Delay(2);
 8001b02:	2002      	movs	r0, #2
 8001b04:	f7fe fe1c 	bl	8000740 <HAL_Delay>

}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <__errno>:
 8001b10:	4b01      	ldr	r3, [pc, #4]	; (8001b18 <__errno+0x8>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	4770      	bx	lr
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	2000000c 	.word	0x2000000c

08001b1c <__libc_init_array>:
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	2600      	movs	r6, #0
 8001b20:	4d0c      	ldr	r5, [pc, #48]	; (8001b54 <__libc_init_array+0x38>)
 8001b22:	4c0d      	ldr	r4, [pc, #52]	; (8001b58 <__libc_init_array+0x3c>)
 8001b24:	1b64      	subs	r4, r4, r5
 8001b26:	10a4      	asrs	r4, r4, #2
 8001b28:	42a6      	cmp	r6, r4
 8001b2a:	d109      	bne.n	8001b40 <__libc_init_array+0x24>
 8001b2c:	2600      	movs	r6, #0
 8001b2e:	f000 fc8b 	bl	8002448 <_init>
 8001b32:	4d0a      	ldr	r5, [pc, #40]	; (8001b5c <__libc_init_array+0x40>)
 8001b34:	4c0a      	ldr	r4, [pc, #40]	; (8001b60 <__libc_init_array+0x44>)
 8001b36:	1b64      	subs	r4, r4, r5
 8001b38:	10a4      	asrs	r4, r4, #2
 8001b3a:	42a6      	cmp	r6, r4
 8001b3c:	d105      	bne.n	8001b4a <__libc_init_array+0x2e>
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
 8001b40:	00b3      	lsls	r3, r6, #2
 8001b42:	58eb      	ldr	r3, [r5, r3]
 8001b44:	4798      	blx	r3
 8001b46:	3601      	adds	r6, #1
 8001b48:	e7ee      	b.n	8001b28 <__libc_init_array+0xc>
 8001b4a:	00b3      	lsls	r3, r6, #2
 8001b4c:	58eb      	ldr	r3, [r5, r3]
 8001b4e:	4798      	blx	r3
 8001b50:	3601      	adds	r6, #1
 8001b52:	e7f2      	b.n	8001b3a <__libc_init_array+0x1e>
 8001b54:	08002504 	.word	0x08002504
 8001b58:	08002504 	.word	0x08002504
 8001b5c:	08002504 	.word	0x08002504
 8001b60:	08002508 	.word	0x08002508

08001b64 <memcpy>:
 8001b64:	2300      	movs	r3, #0
 8001b66:	b510      	push	{r4, lr}
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d100      	bne.n	8001b6e <memcpy+0xa>
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	5ccc      	ldrb	r4, [r1, r3]
 8001b70:	54c4      	strb	r4, [r0, r3]
 8001b72:	3301      	adds	r3, #1
 8001b74:	e7f8      	b.n	8001b68 <memcpy+0x4>

08001b76 <memset>:
 8001b76:	0003      	movs	r3, r0
 8001b78:	1882      	adds	r2, r0, r2
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d100      	bne.n	8001b80 <memset+0xa>
 8001b7e:	4770      	bx	lr
 8001b80:	7019      	strb	r1, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	e7f9      	b.n	8001b7a <memset+0x4>
	...

08001b88 <siprintf>:
 8001b88:	b40e      	push	{r1, r2, r3}
 8001b8a:	b500      	push	{lr}
 8001b8c:	490b      	ldr	r1, [pc, #44]	; (8001bbc <siprintf+0x34>)
 8001b8e:	b09c      	sub	sp, #112	; 0x70
 8001b90:	ab1d      	add	r3, sp, #116	; 0x74
 8001b92:	9002      	str	r0, [sp, #8]
 8001b94:	9006      	str	r0, [sp, #24]
 8001b96:	9107      	str	r1, [sp, #28]
 8001b98:	9104      	str	r1, [sp, #16]
 8001b9a:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <siprintf+0x38>)
 8001b9c:	4909      	ldr	r1, [pc, #36]	; (8001bc4 <siprintf+0x3c>)
 8001b9e:	cb04      	ldmia	r3!, {r2}
 8001ba0:	9105      	str	r1, [sp, #20]
 8001ba2:	6800      	ldr	r0, [r0, #0]
 8001ba4:	a902      	add	r1, sp, #8
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	f000 f870 	bl	8001c8c <_svfiprintf_r>
 8001bac:	2300      	movs	r3, #0
 8001bae:	9a02      	ldr	r2, [sp, #8]
 8001bb0:	7013      	strb	r3, [r2, #0]
 8001bb2:	b01c      	add	sp, #112	; 0x70
 8001bb4:	bc08      	pop	{r3}
 8001bb6:	b003      	add	sp, #12
 8001bb8:	4718      	bx	r3
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	7fffffff 	.word	0x7fffffff
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	ffff0208 	.word	0xffff0208

08001bc8 <__ssputs_r>:
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	688e      	ldr	r6, [r1, #8]
 8001bcc:	b085      	sub	sp, #20
 8001bce:	0007      	movs	r7, r0
 8001bd0:	000c      	movs	r4, r1
 8001bd2:	9203      	str	r2, [sp, #12]
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	429e      	cmp	r6, r3
 8001bd8:	d83c      	bhi.n	8001c54 <__ssputs_r+0x8c>
 8001bda:	2390      	movs	r3, #144	; 0x90
 8001bdc:	898a      	ldrh	r2, [r1, #12]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	421a      	tst	r2, r3
 8001be2:	d034      	beq.n	8001c4e <__ssputs_r+0x86>
 8001be4:	6909      	ldr	r1, [r1, #16]
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	6960      	ldr	r0, [r4, #20]
 8001bea:	1a5b      	subs	r3, r3, r1
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2303      	movs	r3, #3
 8001bf0:	4343      	muls	r3, r0
 8001bf2:	0fdd      	lsrs	r5, r3, #31
 8001bf4:	18ed      	adds	r5, r5, r3
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	9802      	ldr	r0, [sp, #8]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	181b      	adds	r3, r3, r0
 8001bfe:	106d      	asrs	r5, r5, #1
 8001c00:	42ab      	cmp	r3, r5
 8001c02:	d900      	bls.n	8001c06 <__ssputs_r+0x3e>
 8001c04:	001d      	movs	r5, r3
 8001c06:	0553      	lsls	r3, r2, #21
 8001c08:	d532      	bpl.n	8001c70 <__ssputs_r+0xa8>
 8001c0a:	0029      	movs	r1, r5
 8001c0c:	0038      	movs	r0, r7
 8001c0e:	f000 fb49 	bl	80022a4 <_malloc_r>
 8001c12:	1e06      	subs	r6, r0, #0
 8001c14:	d109      	bne.n	8001c2a <__ssputs_r+0x62>
 8001c16:	230c      	movs	r3, #12
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	2340      	movs	r3, #64	; 0x40
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	89a2      	ldrh	r2, [r4, #12]
 8001c20:	4240      	negs	r0, r0
 8001c22:	4313      	orrs	r3, r2
 8001c24:	81a3      	strh	r3, [r4, #12]
 8001c26:	b005      	add	sp, #20
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2a:	9a02      	ldr	r2, [sp, #8]
 8001c2c:	6921      	ldr	r1, [r4, #16]
 8001c2e:	f7ff ff99 	bl	8001b64 <memcpy>
 8001c32:	89a3      	ldrh	r3, [r4, #12]
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <__ssputs_r+0xc0>)
 8001c36:	401a      	ands	r2, r3
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	81a3      	strh	r3, [r4, #12]
 8001c3e:	9b02      	ldr	r3, [sp, #8]
 8001c40:	6126      	str	r6, [r4, #16]
 8001c42:	18f6      	adds	r6, r6, r3
 8001c44:	6026      	str	r6, [r4, #0]
 8001c46:	6165      	str	r5, [r4, #20]
 8001c48:	9e01      	ldr	r6, [sp, #4]
 8001c4a:	1aed      	subs	r5, r5, r3
 8001c4c:	60a5      	str	r5, [r4, #8]
 8001c4e:	9b01      	ldr	r3, [sp, #4]
 8001c50:	429e      	cmp	r6, r3
 8001c52:	d900      	bls.n	8001c56 <__ssputs_r+0x8e>
 8001c54:	9e01      	ldr	r6, [sp, #4]
 8001c56:	0032      	movs	r2, r6
 8001c58:	9903      	ldr	r1, [sp, #12]
 8001c5a:	6820      	ldr	r0, [r4, #0]
 8001c5c:	f000 faa3 	bl	80021a6 <memmove>
 8001c60:	68a3      	ldr	r3, [r4, #8]
 8001c62:	2000      	movs	r0, #0
 8001c64:	1b9b      	subs	r3, r3, r6
 8001c66:	60a3      	str	r3, [r4, #8]
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	199e      	adds	r6, r3, r6
 8001c6c:	6026      	str	r6, [r4, #0]
 8001c6e:	e7da      	b.n	8001c26 <__ssputs_r+0x5e>
 8001c70:	002a      	movs	r2, r5
 8001c72:	0038      	movs	r0, r7
 8001c74:	f000 fb8c 	bl	8002390 <_realloc_r>
 8001c78:	1e06      	subs	r6, r0, #0
 8001c7a:	d1e0      	bne.n	8001c3e <__ssputs_r+0x76>
 8001c7c:	0038      	movs	r0, r7
 8001c7e:	6921      	ldr	r1, [r4, #16]
 8001c80:	f000 faa4 	bl	80021cc <_free_r>
 8001c84:	e7c7      	b.n	8001c16 <__ssputs_r+0x4e>
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	fffffb7f 	.word	0xfffffb7f

08001c8c <_svfiprintf_r>:
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	b0a1      	sub	sp, #132	; 0x84
 8001c90:	9003      	str	r0, [sp, #12]
 8001c92:	001d      	movs	r5, r3
 8001c94:	898b      	ldrh	r3, [r1, #12]
 8001c96:	000f      	movs	r7, r1
 8001c98:	0016      	movs	r6, r2
 8001c9a:	061b      	lsls	r3, r3, #24
 8001c9c:	d511      	bpl.n	8001cc2 <_svfiprintf_r+0x36>
 8001c9e:	690b      	ldr	r3, [r1, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10e      	bne.n	8001cc2 <_svfiprintf_r+0x36>
 8001ca4:	2140      	movs	r1, #64	; 0x40
 8001ca6:	f000 fafd 	bl	80022a4 <_malloc_r>
 8001caa:	6038      	str	r0, [r7, #0]
 8001cac:	6138      	str	r0, [r7, #16]
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	d105      	bne.n	8001cbe <_svfiprintf_r+0x32>
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	9a03      	ldr	r2, [sp, #12]
 8001cb6:	3801      	subs	r0, #1
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	b021      	add	sp, #132	; 0x84
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbe:	2340      	movs	r3, #64	; 0x40
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	ac08      	add	r4, sp, #32
 8001cc6:	6163      	str	r3, [r4, #20]
 8001cc8:	3320      	adds	r3, #32
 8001cca:	7663      	strb	r3, [r4, #25]
 8001ccc:	3310      	adds	r3, #16
 8001cce:	76a3      	strb	r3, [r4, #26]
 8001cd0:	9507      	str	r5, [sp, #28]
 8001cd2:	0035      	movs	r5, r6
 8001cd4:	782b      	ldrb	r3, [r5, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <_svfiprintf_r+0x52>
 8001cda:	2b25      	cmp	r3, #37	; 0x25
 8001cdc:	d147      	bne.n	8001d6e <_svfiprintf_r+0xe2>
 8001cde:	1bab      	subs	r3, r5, r6
 8001ce0:	9305      	str	r3, [sp, #20]
 8001ce2:	42b5      	cmp	r5, r6
 8001ce4:	d00c      	beq.n	8001d00 <_svfiprintf_r+0x74>
 8001ce6:	0032      	movs	r2, r6
 8001ce8:	0039      	movs	r1, r7
 8001cea:	9803      	ldr	r0, [sp, #12]
 8001cec:	f7ff ff6c 	bl	8001bc8 <__ssputs_r>
 8001cf0:	1c43      	adds	r3, r0, #1
 8001cf2:	d100      	bne.n	8001cf6 <_svfiprintf_r+0x6a>
 8001cf4:	e0ae      	b.n	8001e54 <_svfiprintf_r+0x1c8>
 8001cf6:	6962      	ldr	r2, [r4, #20]
 8001cf8:	9b05      	ldr	r3, [sp, #20]
 8001cfa:	4694      	mov	ip, r2
 8001cfc:	4463      	add	r3, ip
 8001cfe:	6163      	str	r3, [r4, #20]
 8001d00:	782b      	ldrb	r3, [r5, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d100      	bne.n	8001d08 <_svfiprintf_r+0x7c>
 8001d06:	e0a5      	b.n	8001e54 <_svfiprintf_r+0x1c8>
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	4252      	negs	r2, r2
 8001d0e:	6062      	str	r2, [r4, #4]
 8001d10:	a904      	add	r1, sp, #16
 8001d12:	3254      	adds	r2, #84	; 0x54
 8001d14:	1852      	adds	r2, r2, r1
 8001d16:	1c6e      	adds	r6, r5, #1
 8001d18:	6023      	str	r3, [r4, #0]
 8001d1a:	60e3      	str	r3, [r4, #12]
 8001d1c:	60a3      	str	r3, [r4, #8]
 8001d1e:	7013      	strb	r3, [r2, #0]
 8001d20:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d22:	2205      	movs	r2, #5
 8001d24:	7831      	ldrb	r1, [r6, #0]
 8001d26:	4854      	ldr	r0, [pc, #336]	; (8001e78 <_svfiprintf_r+0x1ec>)
 8001d28:	f000 fa32 	bl	8002190 <memchr>
 8001d2c:	1c75      	adds	r5, r6, #1
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d11f      	bne.n	8001d72 <_svfiprintf_r+0xe6>
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	06d3      	lsls	r3, r2, #27
 8001d36:	d504      	bpl.n	8001d42 <_svfiprintf_r+0xb6>
 8001d38:	2353      	movs	r3, #83	; 0x53
 8001d3a:	a904      	add	r1, sp, #16
 8001d3c:	185b      	adds	r3, r3, r1
 8001d3e:	2120      	movs	r1, #32
 8001d40:	7019      	strb	r1, [r3, #0]
 8001d42:	0713      	lsls	r3, r2, #28
 8001d44:	d504      	bpl.n	8001d50 <_svfiprintf_r+0xc4>
 8001d46:	2353      	movs	r3, #83	; 0x53
 8001d48:	a904      	add	r1, sp, #16
 8001d4a:	185b      	adds	r3, r3, r1
 8001d4c:	212b      	movs	r1, #43	; 0x2b
 8001d4e:	7019      	strb	r1, [r3, #0]
 8001d50:	7833      	ldrb	r3, [r6, #0]
 8001d52:	2b2a      	cmp	r3, #42	; 0x2a
 8001d54:	d016      	beq.n	8001d84 <_svfiprintf_r+0xf8>
 8001d56:	0035      	movs	r5, r6
 8001d58:	2100      	movs	r1, #0
 8001d5a:	200a      	movs	r0, #10
 8001d5c:	68e3      	ldr	r3, [r4, #12]
 8001d5e:	782a      	ldrb	r2, [r5, #0]
 8001d60:	1c6e      	adds	r6, r5, #1
 8001d62:	3a30      	subs	r2, #48	; 0x30
 8001d64:	2a09      	cmp	r2, #9
 8001d66:	d94e      	bls.n	8001e06 <_svfiprintf_r+0x17a>
 8001d68:	2900      	cmp	r1, #0
 8001d6a:	d111      	bne.n	8001d90 <_svfiprintf_r+0x104>
 8001d6c:	e017      	b.n	8001d9e <_svfiprintf_r+0x112>
 8001d6e:	3501      	adds	r5, #1
 8001d70:	e7b0      	b.n	8001cd4 <_svfiprintf_r+0x48>
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <_svfiprintf_r+0x1ec>)
 8001d74:	6822      	ldr	r2, [r4, #0]
 8001d76:	1ac0      	subs	r0, r0, r3
 8001d78:	2301      	movs	r3, #1
 8001d7a:	4083      	lsls	r3, r0
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	002e      	movs	r6, r5
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	e7ce      	b.n	8001d22 <_svfiprintf_r+0x96>
 8001d84:	9b07      	ldr	r3, [sp, #28]
 8001d86:	1d19      	adds	r1, r3, #4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	9107      	str	r1, [sp, #28]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db01      	blt.n	8001d94 <_svfiprintf_r+0x108>
 8001d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d92:	e004      	b.n	8001d9e <_svfiprintf_r+0x112>
 8001d94:	425b      	negs	r3, r3
 8001d96:	60e3      	str	r3, [r4, #12]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	6023      	str	r3, [r4, #0]
 8001d9e:	782b      	ldrb	r3, [r5, #0]
 8001da0:	2b2e      	cmp	r3, #46	; 0x2e
 8001da2:	d10a      	bne.n	8001dba <_svfiprintf_r+0x12e>
 8001da4:	786b      	ldrb	r3, [r5, #1]
 8001da6:	2b2a      	cmp	r3, #42	; 0x2a
 8001da8:	d135      	bne.n	8001e16 <_svfiprintf_r+0x18a>
 8001daa:	9b07      	ldr	r3, [sp, #28]
 8001dac:	3502      	adds	r5, #2
 8001dae:	1d1a      	adds	r2, r3, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	9207      	str	r2, [sp, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db2b      	blt.n	8001e10 <_svfiprintf_r+0x184>
 8001db8:	9309      	str	r3, [sp, #36]	; 0x24
 8001dba:	4e30      	ldr	r6, [pc, #192]	; (8001e7c <_svfiprintf_r+0x1f0>)
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	0030      	movs	r0, r6
 8001dc0:	7829      	ldrb	r1, [r5, #0]
 8001dc2:	f000 f9e5 	bl	8002190 <memchr>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d006      	beq.n	8001dd8 <_svfiprintf_r+0x14c>
 8001dca:	2340      	movs	r3, #64	; 0x40
 8001dcc:	1b80      	subs	r0, r0, r6
 8001dce:	4083      	lsls	r3, r0
 8001dd0:	6822      	ldr	r2, [r4, #0]
 8001dd2:	3501      	adds	r5, #1
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	6023      	str	r3, [r4, #0]
 8001dd8:	7829      	ldrb	r1, [r5, #0]
 8001dda:	2206      	movs	r2, #6
 8001ddc:	4828      	ldr	r0, [pc, #160]	; (8001e80 <_svfiprintf_r+0x1f4>)
 8001dde:	1c6e      	adds	r6, r5, #1
 8001de0:	7621      	strb	r1, [r4, #24]
 8001de2:	f000 f9d5 	bl	8002190 <memchr>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d03c      	beq.n	8001e64 <_svfiprintf_r+0x1d8>
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <_svfiprintf_r+0x1f8>)
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d125      	bne.n	8001e3c <_svfiprintf_r+0x1b0>
 8001df0:	2207      	movs	r2, #7
 8001df2:	9b07      	ldr	r3, [sp, #28]
 8001df4:	3307      	adds	r3, #7
 8001df6:	4393      	bics	r3, r2
 8001df8:	3308      	adds	r3, #8
 8001dfa:	9307      	str	r3, [sp, #28]
 8001dfc:	6963      	ldr	r3, [r4, #20]
 8001dfe:	9a04      	ldr	r2, [sp, #16]
 8001e00:	189b      	adds	r3, r3, r2
 8001e02:	6163      	str	r3, [r4, #20]
 8001e04:	e765      	b.n	8001cd2 <_svfiprintf_r+0x46>
 8001e06:	4343      	muls	r3, r0
 8001e08:	0035      	movs	r5, r6
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	189b      	adds	r3, r3, r2
 8001e0e:	e7a6      	b.n	8001d5e <_svfiprintf_r+0xd2>
 8001e10:	2301      	movs	r3, #1
 8001e12:	425b      	negs	r3, r3
 8001e14:	e7d0      	b.n	8001db8 <_svfiprintf_r+0x12c>
 8001e16:	2300      	movs	r3, #0
 8001e18:	200a      	movs	r0, #10
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	3501      	adds	r5, #1
 8001e1e:	6063      	str	r3, [r4, #4]
 8001e20:	7829      	ldrb	r1, [r5, #0]
 8001e22:	1c6e      	adds	r6, r5, #1
 8001e24:	3930      	subs	r1, #48	; 0x30
 8001e26:	2909      	cmp	r1, #9
 8001e28:	d903      	bls.n	8001e32 <_svfiprintf_r+0x1a6>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0c5      	beq.n	8001dba <_svfiprintf_r+0x12e>
 8001e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8001e30:	e7c3      	b.n	8001dba <_svfiprintf_r+0x12e>
 8001e32:	4342      	muls	r2, r0
 8001e34:	0035      	movs	r5, r6
 8001e36:	2301      	movs	r3, #1
 8001e38:	1852      	adds	r2, r2, r1
 8001e3a:	e7f1      	b.n	8001e20 <_svfiprintf_r+0x194>
 8001e3c:	ab07      	add	r3, sp, #28
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	003a      	movs	r2, r7
 8001e42:	0021      	movs	r1, r4
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <_svfiprintf_r+0x1fc>)
 8001e46:	9803      	ldr	r0, [sp, #12]
 8001e48:	e000      	b.n	8001e4c <_svfiprintf_r+0x1c0>
 8001e4a:	bf00      	nop
 8001e4c:	9004      	str	r0, [sp, #16]
 8001e4e:	9b04      	ldr	r3, [sp, #16]
 8001e50:	3301      	adds	r3, #1
 8001e52:	d1d3      	bne.n	8001dfc <_svfiprintf_r+0x170>
 8001e54:	89bb      	ldrh	r3, [r7, #12]
 8001e56:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001e58:	065b      	lsls	r3, r3, #25
 8001e5a:	d400      	bmi.n	8001e5e <_svfiprintf_r+0x1d2>
 8001e5c:	e72d      	b.n	8001cba <_svfiprintf_r+0x2e>
 8001e5e:	2001      	movs	r0, #1
 8001e60:	4240      	negs	r0, r0
 8001e62:	e72a      	b.n	8001cba <_svfiprintf_r+0x2e>
 8001e64:	ab07      	add	r3, sp, #28
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	003a      	movs	r2, r7
 8001e6a:	0021      	movs	r1, r4
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <_svfiprintf_r+0x1fc>)
 8001e6e:	9803      	ldr	r0, [sp, #12]
 8001e70:	f000 f87c 	bl	8001f6c <_printf_i>
 8001e74:	e7ea      	b.n	8001e4c <_svfiprintf_r+0x1c0>
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	080024d0 	.word	0x080024d0
 8001e7c:	080024d6 	.word	0x080024d6
 8001e80:	080024da 	.word	0x080024da
 8001e84:	00000000 	.word	0x00000000
 8001e88:	08001bc9 	.word	0x08001bc9

08001e8c <_printf_common>:
 8001e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e8e:	0015      	movs	r5, r2
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	688a      	ldr	r2, [r1, #8]
 8001e94:	690b      	ldr	r3, [r1, #16]
 8001e96:	000c      	movs	r4, r1
 8001e98:	9000      	str	r0, [sp, #0]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	da00      	bge.n	8001ea0 <_printf_common+0x14>
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	0022      	movs	r2, r4
 8001ea2:	602b      	str	r3, [r5, #0]
 8001ea4:	3243      	adds	r2, #67	; 0x43
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	d001      	beq.n	8001eb0 <_printf_common+0x24>
 8001eac:	3301      	adds	r3, #1
 8001eae:	602b      	str	r3, [r5, #0]
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	069b      	lsls	r3, r3, #26
 8001eb4:	d502      	bpl.n	8001ebc <_printf_common+0x30>
 8001eb6:	682b      	ldr	r3, [r5, #0]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	602b      	str	r3, [r5, #0]
 8001ebc:	6822      	ldr	r2, [r4, #0]
 8001ebe:	2306      	movs	r3, #6
 8001ec0:	0017      	movs	r7, r2
 8001ec2:	401f      	ands	r7, r3
 8001ec4:	421a      	tst	r2, r3
 8001ec6:	d027      	beq.n	8001f18 <_printf_common+0x8c>
 8001ec8:	0023      	movs	r3, r4
 8001eca:	3343      	adds	r3, #67	; 0x43
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	4193      	sbcs	r3, r2
 8001ed2:	6822      	ldr	r2, [r4, #0]
 8001ed4:	0692      	lsls	r2, r2, #26
 8001ed6:	d430      	bmi.n	8001f3a <_printf_common+0xae>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	9901      	ldr	r1, [sp, #4]
 8001edc:	9800      	ldr	r0, [sp, #0]
 8001ede:	9e08      	ldr	r6, [sp, #32]
 8001ee0:	3243      	adds	r2, #67	; 0x43
 8001ee2:	47b0      	blx	r6
 8001ee4:	1c43      	adds	r3, r0, #1
 8001ee6:	d025      	beq.n	8001f34 <_printf_common+0xa8>
 8001ee8:	2306      	movs	r3, #6
 8001eea:	6820      	ldr	r0, [r4, #0]
 8001eec:	682a      	ldr	r2, [r5, #0]
 8001eee:	68e1      	ldr	r1, [r4, #12]
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	4003      	ands	r3, r0
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d103      	bne.n	8001f00 <_printf_common+0x74>
 8001ef8:	1a8d      	subs	r5, r1, r2
 8001efa:	43eb      	mvns	r3, r5
 8001efc:	17db      	asrs	r3, r3, #31
 8001efe:	401d      	ands	r5, r3
 8001f00:	68a3      	ldr	r3, [r4, #8]
 8001f02:	6922      	ldr	r2, [r4, #16]
 8001f04:	4293      	cmp	r3, r2
 8001f06:	dd01      	ble.n	8001f0c <_printf_common+0x80>
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	18ed      	adds	r5, r5, r3
 8001f0c:	2700      	movs	r7, #0
 8001f0e:	42bd      	cmp	r5, r7
 8001f10:	d120      	bne.n	8001f54 <_printf_common+0xc8>
 8001f12:	2000      	movs	r0, #0
 8001f14:	e010      	b.n	8001f38 <_printf_common+0xac>
 8001f16:	3701      	adds	r7, #1
 8001f18:	68e3      	ldr	r3, [r4, #12]
 8001f1a:	682a      	ldr	r2, [r5, #0]
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	42bb      	cmp	r3, r7
 8001f20:	ddd2      	ble.n	8001ec8 <_printf_common+0x3c>
 8001f22:	0022      	movs	r2, r4
 8001f24:	2301      	movs	r3, #1
 8001f26:	9901      	ldr	r1, [sp, #4]
 8001f28:	9800      	ldr	r0, [sp, #0]
 8001f2a:	9e08      	ldr	r6, [sp, #32]
 8001f2c:	3219      	adds	r2, #25
 8001f2e:	47b0      	blx	r6
 8001f30:	1c43      	adds	r3, r0, #1
 8001f32:	d1f0      	bne.n	8001f16 <_printf_common+0x8a>
 8001f34:	2001      	movs	r0, #1
 8001f36:	4240      	negs	r0, r0
 8001f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001f3a:	2030      	movs	r0, #48	; 0x30
 8001f3c:	18e1      	adds	r1, r4, r3
 8001f3e:	3143      	adds	r1, #67	; 0x43
 8001f40:	7008      	strb	r0, [r1, #0]
 8001f42:	0021      	movs	r1, r4
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	3145      	adds	r1, #69	; 0x45
 8001f48:	7809      	ldrb	r1, [r1, #0]
 8001f4a:	18a2      	adds	r2, r4, r2
 8001f4c:	3243      	adds	r2, #67	; 0x43
 8001f4e:	3302      	adds	r3, #2
 8001f50:	7011      	strb	r1, [r2, #0]
 8001f52:	e7c1      	b.n	8001ed8 <_printf_common+0x4c>
 8001f54:	0022      	movs	r2, r4
 8001f56:	2301      	movs	r3, #1
 8001f58:	9901      	ldr	r1, [sp, #4]
 8001f5a:	9800      	ldr	r0, [sp, #0]
 8001f5c:	9e08      	ldr	r6, [sp, #32]
 8001f5e:	321a      	adds	r2, #26
 8001f60:	47b0      	blx	r6
 8001f62:	1c43      	adds	r3, r0, #1
 8001f64:	d0e6      	beq.n	8001f34 <_printf_common+0xa8>
 8001f66:	3701      	adds	r7, #1
 8001f68:	e7d1      	b.n	8001f0e <_printf_common+0x82>
	...

08001f6c <_printf_i>:
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	b08b      	sub	sp, #44	; 0x2c
 8001f70:	9206      	str	r2, [sp, #24]
 8001f72:	000a      	movs	r2, r1
 8001f74:	3243      	adds	r2, #67	; 0x43
 8001f76:	9307      	str	r3, [sp, #28]
 8001f78:	9005      	str	r0, [sp, #20]
 8001f7a:	9204      	str	r2, [sp, #16]
 8001f7c:	7e0a      	ldrb	r2, [r1, #24]
 8001f7e:	000c      	movs	r4, r1
 8001f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001f82:	2a78      	cmp	r2, #120	; 0x78
 8001f84:	d807      	bhi.n	8001f96 <_printf_i+0x2a>
 8001f86:	2a62      	cmp	r2, #98	; 0x62
 8001f88:	d809      	bhi.n	8001f9e <_printf_i+0x32>
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	d100      	bne.n	8001f90 <_printf_i+0x24>
 8001f8e:	e0c1      	b.n	8002114 <_printf_i+0x1a8>
 8001f90:	2a58      	cmp	r2, #88	; 0x58
 8001f92:	d100      	bne.n	8001f96 <_printf_i+0x2a>
 8001f94:	e08c      	b.n	80020b0 <_printf_i+0x144>
 8001f96:	0026      	movs	r6, r4
 8001f98:	3642      	adds	r6, #66	; 0x42
 8001f9a:	7032      	strb	r2, [r6, #0]
 8001f9c:	e022      	b.n	8001fe4 <_printf_i+0x78>
 8001f9e:	0010      	movs	r0, r2
 8001fa0:	3863      	subs	r0, #99	; 0x63
 8001fa2:	2815      	cmp	r0, #21
 8001fa4:	d8f7      	bhi.n	8001f96 <_printf_i+0x2a>
 8001fa6:	f7fe f8ab 	bl	8000100 <__gnu_thumb1_case_shi>
 8001faa:	0016      	.short	0x0016
 8001fac:	fff6001f 	.word	0xfff6001f
 8001fb0:	fff6fff6 	.word	0xfff6fff6
 8001fb4:	001ffff6 	.word	0x001ffff6
 8001fb8:	fff6fff6 	.word	0xfff6fff6
 8001fbc:	fff6fff6 	.word	0xfff6fff6
 8001fc0:	003600a8 	.word	0x003600a8
 8001fc4:	fff6009a 	.word	0xfff6009a
 8001fc8:	00b9fff6 	.word	0x00b9fff6
 8001fcc:	0036fff6 	.word	0x0036fff6
 8001fd0:	fff6fff6 	.word	0xfff6fff6
 8001fd4:	009e      	.short	0x009e
 8001fd6:	0026      	movs	r6, r4
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	3642      	adds	r6, #66	; 0x42
 8001fdc:	1d11      	adds	r1, r2, #4
 8001fde:	6019      	str	r1, [r3, #0]
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	7033      	strb	r3, [r6, #0]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0a7      	b.n	8002138 <_printf_i+0x1cc>
 8001fe8:	6808      	ldr	r0, [r1, #0]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	1d0a      	adds	r2, r1, #4
 8001fee:	0605      	lsls	r5, r0, #24
 8001ff0:	d50b      	bpl.n	800200a <_printf_i+0x9e>
 8001ff2:	680d      	ldr	r5, [r1, #0]
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	2d00      	cmp	r5, #0
 8001ff8:	da03      	bge.n	8002002 <_printf_i+0x96>
 8001ffa:	232d      	movs	r3, #45	; 0x2d
 8001ffc:	9a04      	ldr	r2, [sp, #16]
 8001ffe:	426d      	negs	r5, r5
 8002000:	7013      	strb	r3, [r2, #0]
 8002002:	4b61      	ldr	r3, [pc, #388]	; (8002188 <_printf_i+0x21c>)
 8002004:	270a      	movs	r7, #10
 8002006:	9303      	str	r3, [sp, #12]
 8002008:	e01b      	b.n	8002042 <_printf_i+0xd6>
 800200a:	680d      	ldr	r5, [r1, #0]
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	0641      	lsls	r1, r0, #25
 8002010:	d5f1      	bpl.n	8001ff6 <_printf_i+0x8a>
 8002012:	b22d      	sxth	r5, r5
 8002014:	e7ef      	b.n	8001ff6 <_printf_i+0x8a>
 8002016:	680d      	ldr	r5, [r1, #0]
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	1d08      	adds	r0, r1, #4
 800201c:	6018      	str	r0, [r3, #0]
 800201e:	062e      	lsls	r6, r5, #24
 8002020:	d501      	bpl.n	8002026 <_printf_i+0xba>
 8002022:	680d      	ldr	r5, [r1, #0]
 8002024:	e003      	b.n	800202e <_printf_i+0xc2>
 8002026:	066d      	lsls	r5, r5, #25
 8002028:	d5fb      	bpl.n	8002022 <_printf_i+0xb6>
 800202a:	680d      	ldr	r5, [r1, #0]
 800202c:	b2ad      	uxth	r5, r5
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <_printf_i+0x21c>)
 8002030:	2708      	movs	r7, #8
 8002032:	9303      	str	r3, [sp, #12]
 8002034:	2a6f      	cmp	r2, #111	; 0x6f
 8002036:	d000      	beq.n	800203a <_printf_i+0xce>
 8002038:	3702      	adds	r7, #2
 800203a:	0023      	movs	r3, r4
 800203c:	2200      	movs	r2, #0
 800203e:	3343      	adds	r3, #67	; 0x43
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	6863      	ldr	r3, [r4, #4]
 8002044:	60a3      	str	r3, [r4, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db03      	blt.n	8002052 <_printf_i+0xe6>
 800204a:	2204      	movs	r2, #4
 800204c:	6821      	ldr	r1, [r4, #0]
 800204e:	4391      	bics	r1, r2
 8002050:	6021      	str	r1, [r4, #0]
 8002052:	2d00      	cmp	r5, #0
 8002054:	d102      	bne.n	800205c <_printf_i+0xf0>
 8002056:	9e04      	ldr	r6, [sp, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00c      	beq.n	8002076 <_printf_i+0x10a>
 800205c:	9e04      	ldr	r6, [sp, #16]
 800205e:	0028      	movs	r0, r5
 8002060:	0039      	movs	r1, r7
 8002062:	f7fe f8dd 	bl	8000220 <__aeabi_uidivmod>
 8002066:	9b03      	ldr	r3, [sp, #12]
 8002068:	3e01      	subs	r6, #1
 800206a:	5c5b      	ldrb	r3, [r3, r1]
 800206c:	7033      	strb	r3, [r6, #0]
 800206e:	002b      	movs	r3, r5
 8002070:	0005      	movs	r5, r0
 8002072:	429f      	cmp	r7, r3
 8002074:	d9f3      	bls.n	800205e <_printf_i+0xf2>
 8002076:	2f08      	cmp	r7, #8
 8002078:	d109      	bne.n	800208e <_printf_i+0x122>
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	07db      	lsls	r3, r3, #31
 800207e:	d506      	bpl.n	800208e <_printf_i+0x122>
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	6922      	ldr	r2, [r4, #16]
 8002084:	4293      	cmp	r3, r2
 8002086:	dc02      	bgt.n	800208e <_printf_i+0x122>
 8002088:	2330      	movs	r3, #48	; 0x30
 800208a:	3e01      	subs	r6, #1
 800208c:	7033      	strb	r3, [r6, #0]
 800208e:	9b04      	ldr	r3, [sp, #16]
 8002090:	1b9b      	subs	r3, r3, r6
 8002092:	6123      	str	r3, [r4, #16]
 8002094:	9b07      	ldr	r3, [sp, #28]
 8002096:	0021      	movs	r1, r4
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	9805      	ldr	r0, [sp, #20]
 800209c:	9b06      	ldr	r3, [sp, #24]
 800209e:	aa09      	add	r2, sp, #36	; 0x24
 80020a0:	f7ff fef4 	bl	8001e8c <_printf_common>
 80020a4:	1c43      	adds	r3, r0, #1
 80020a6:	d14c      	bne.n	8002142 <_printf_i+0x1d6>
 80020a8:	2001      	movs	r0, #1
 80020aa:	4240      	negs	r0, r0
 80020ac:	b00b      	add	sp, #44	; 0x2c
 80020ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b0:	3145      	adds	r1, #69	; 0x45
 80020b2:	700a      	strb	r2, [r1, #0]
 80020b4:	4a34      	ldr	r2, [pc, #208]	; (8002188 <_printf_i+0x21c>)
 80020b6:	9203      	str	r2, [sp, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	6821      	ldr	r1, [r4, #0]
 80020bc:	ca20      	ldmia	r2!, {r5}
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	0608      	lsls	r0, r1, #24
 80020c2:	d516      	bpl.n	80020f2 <_printf_i+0x186>
 80020c4:	07cb      	lsls	r3, r1, #31
 80020c6:	d502      	bpl.n	80020ce <_printf_i+0x162>
 80020c8:	2320      	movs	r3, #32
 80020ca:	4319      	orrs	r1, r3
 80020cc:	6021      	str	r1, [r4, #0]
 80020ce:	2710      	movs	r7, #16
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	d1b2      	bne.n	800203a <_printf_i+0xce>
 80020d4:	2320      	movs	r3, #32
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	439a      	bics	r2, r3
 80020da:	6022      	str	r2, [r4, #0]
 80020dc:	e7ad      	b.n	800203a <_printf_i+0xce>
 80020de:	2220      	movs	r2, #32
 80020e0:	6809      	ldr	r1, [r1, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	6022      	str	r2, [r4, #0]
 80020e6:	0022      	movs	r2, r4
 80020e8:	2178      	movs	r1, #120	; 0x78
 80020ea:	3245      	adds	r2, #69	; 0x45
 80020ec:	7011      	strb	r1, [r2, #0]
 80020ee:	4a27      	ldr	r2, [pc, #156]	; (800218c <_printf_i+0x220>)
 80020f0:	e7e1      	b.n	80020b6 <_printf_i+0x14a>
 80020f2:	0648      	lsls	r0, r1, #25
 80020f4:	d5e6      	bpl.n	80020c4 <_printf_i+0x158>
 80020f6:	b2ad      	uxth	r5, r5
 80020f8:	e7e4      	b.n	80020c4 <_printf_i+0x158>
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	680d      	ldr	r5, [r1, #0]
 80020fe:	1d10      	adds	r0, r2, #4
 8002100:	6949      	ldr	r1, [r1, #20]
 8002102:	6018      	str	r0, [r3, #0]
 8002104:	6813      	ldr	r3, [r2, #0]
 8002106:	062e      	lsls	r6, r5, #24
 8002108:	d501      	bpl.n	800210e <_printf_i+0x1a2>
 800210a:	6019      	str	r1, [r3, #0]
 800210c:	e002      	b.n	8002114 <_printf_i+0x1a8>
 800210e:	066d      	lsls	r5, r5, #25
 8002110:	d5fb      	bpl.n	800210a <_printf_i+0x19e>
 8002112:	8019      	strh	r1, [r3, #0]
 8002114:	2300      	movs	r3, #0
 8002116:	9e04      	ldr	r6, [sp, #16]
 8002118:	6123      	str	r3, [r4, #16]
 800211a:	e7bb      	b.n	8002094 <_printf_i+0x128>
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	1d11      	adds	r1, r2, #4
 8002120:	6019      	str	r1, [r3, #0]
 8002122:	6816      	ldr	r6, [r2, #0]
 8002124:	2100      	movs	r1, #0
 8002126:	0030      	movs	r0, r6
 8002128:	6862      	ldr	r2, [r4, #4]
 800212a:	f000 f831 	bl	8002190 <memchr>
 800212e:	2800      	cmp	r0, #0
 8002130:	d001      	beq.n	8002136 <_printf_i+0x1ca>
 8002132:	1b80      	subs	r0, r0, r6
 8002134:	6060      	str	r0, [r4, #4]
 8002136:	6863      	ldr	r3, [r4, #4]
 8002138:	6123      	str	r3, [r4, #16]
 800213a:	2300      	movs	r3, #0
 800213c:	9a04      	ldr	r2, [sp, #16]
 800213e:	7013      	strb	r3, [r2, #0]
 8002140:	e7a8      	b.n	8002094 <_printf_i+0x128>
 8002142:	6923      	ldr	r3, [r4, #16]
 8002144:	0032      	movs	r2, r6
 8002146:	9906      	ldr	r1, [sp, #24]
 8002148:	9805      	ldr	r0, [sp, #20]
 800214a:	9d07      	ldr	r5, [sp, #28]
 800214c:	47a8      	blx	r5
 800214e:	1c43      	adds	r3, r0, #1
 8002150:	d0aa      	beq.n	80020a8 <_printf_i+0x13c>
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	079b      	lsls	r3, r3, #30
 8002156:	d415      	bmi.n	8002184 <_printf_i+0x218>
 8002158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800215a:	68e0      	ldr	r0, [r4, #12]
 800215c:	4298      	cmp	r0, r3
 800215e:	daa5      	bge.n	80020ac <_printf_i+0x140>
 8002160:	0018      	movs	r0, r3
 8002162:	e7a3      	b.n	80020ac <_printf_i+0x140>
 8002164:	0022      	movs	r2, r4
 8002166:	2301      	movs	r3, #1
 8002168:	9906      	ldr	r1, [sp, #24]
 800216a:	9805      	ldr	r0, [sp, #20]
 800216c:	9e07      	ldr	r6, [sp, #28]
 800216e:	3219      	adds	r2, #25
 8002170:	47b0      	blx	r6
 8002172:	1c43      	adds	r3, r0, #1
 8002174:	d098      	beq.n	80020a8 <_printf_i+0x13c>
 8002176:	3501      	adds	r5, #1
 8002178:	68e3      	ldr	r3, [r4, #12]
 800217a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	42ab      	cmp	r3, r5
 8002180:	dcf0      	bgt.n	8002164 <_printf_i+0x1f8>
 8002182:	e7e9      	b.n	8002158 <_printf_i+0x1ec>
 8002184:	2500      	movs	r5, #0
 8002186:	e7f7      	b.n	8002178 <_printf_i+0x20c>
 8002188:	080024e1 	.word	0x080024e1
 800218c:	080024f2 	.word	0x080024f2

08002190 <memchr>:
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	1882      	adds	r2, r0, r2
 8002194:	4290      	cmp	r0, r2
 8002196:	d101      	bne.n	800219c <memchr+0xc>
 8002198:	2000      	movs	r0, #0
 800219a:	4770      	bx	lr
 800219c:	7803      	ldrb	r3, [r0, #0]
 800219e:	428b      	cmp	r3, r1
 80021a0:	d0fb      	beq.n	800219a <memchr+0xa>
 80021a2:	3001      	adds	r0, #1
 80021a4:	e7f6      	b.n	8002194 <memchr+0x4>

080021a6 <memmove>:
 80021a6:	b510      	push	{r4, lr}
 80021a8:	4288      	cmp	r0, r1
 80021aa:	d902      	bls.n	80021b2 <memmove+0xc>
 80021ac:	188b      	adds	r3, r1, r2
 80021ae:	4298      	cmp	r0, r3
 80021b0:	d303      	bcc.n	80021ba <memmove+0x14>
 80021b2:	2300      	movs	r3, #0
 80021b4:	e007      	b.n	80021c6 <memmove+0x20>
 80021b6:	5c8b      	ldrb	r3, [r1, r2]
 80021b8:	5483      	strb	r3, [r0, r2]
 80021ba:	3a01      	subs	r2, #1
 80021bc:	d2fb      	bcs.n	80021b6 <memmove+0x10>
 80021be:	bd10      	pop	{r4, pc}
 80021c0:	5ccc      	ldrb	r4, [r1, r3]
 80021c2:	54c4      	strb	r4, [r0, r3]
 80021c4:	3301      	adds	r3, #1
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d1fa      	bne.n	80021c0 <memmove+0x1a>
 80021ca:	e7f8      	b.n	80021be <memmove+0x18>

080021cc <_free_r>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	0005      	movs	r5, r0
 80021d0:	2900      	cmp	r1, #0
 80021d2:	d010      	beq.n	80021f6 <_free_r+0x2a>
 80021d4:	1f0c      	subs	r4, r1, #4
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da00      	bge.n	80021de <_free_r+0x12>
 80021dc:	18e4      	adds	r4, r4, r3
 80021de:	0028      	movs	r0, r5
 80021e0:	f000 f918 	bl	8002414 <__malloc_lock>
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <_free_r+0x90>)
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <_free_r+0x2c>
 80021ec:	6063      	str	r3, [r4, #4]
 80021ee:	6014      	str	r4, [r2, #0]
 80021f0:	0028      	movs	r0, r5
 80021f2:	f000 f917 	bl	8002424 <__malloc_unlock>
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
 80021f8:	42a3      	cmp	r3, r4
 80021fa:	d908      	bls.n	800220e <_free_r+0x42>
 80021fc:	6821      	ldr	r1, [r4, #0]
 80021fe:	1860      	adds	r0, r4, r1
 8002200:	4283      	cmp	r3, r0
 8002202:	d1f3      	bne.n	80021ec <_free_r+0x20>
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	1841      	adds	r1, r0, r1
 800220a:	6021      	str	r1, [r4, #0]
 800220c:	e7ee      	b.n	80021ec <_free_r+0x20>
 800220e:	001a      	movs	r2, r3
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <_free_r+0x4e>
 8002216:	42a3      	cmp	r3, r4
 8002218:	d9f9      	bls.n	800220e <_free_r+0x42>
 800221a:	6811      	ldr	r1, [r2, #0]
 800221c:	1850      	adds	r0, r2, r1
 800221e:	42a0      	cmp	r0, r4
 8002220:	d10b      	bne.n	800223a <_free_r+0x6e>
 8002222:	6820      	ldr	r0, [r4, #0]
 8002224:	1809      	adds	r1, r1, r0
 8002226:	1850      	adds	r0, r2, r1
 8002228:	6011      	str	r1, [r2, #0]
 800222a:	4283      	cmp	r3, r0
 800222c:	d1e0      	bne.n	80021f0 <_free_r+0x24>
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	1841      	adds	r1, r0, r1
 8002234:	6011      	str	r1, [r2, #0]
 8002236:	6053      	str	r3, [r2, #4]
 8002238:	e7da      	b.n	80021f0 <_free_r+0x24>
 800223a:	42a0      	cmp	r0, r4
 800223c:	d902      	bls.n	8002244 <_free_r+0x78>
 800223e:	230c      	movs	r3, #12
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	e7d5      	b.n	80021f0 <_free_r+0x24>
 8002244:	6821      	ldr	r1, [r4, #0]
 8002246:	1860      	adds	r0, r4, r1
 8002248:	4283      	cmp	r3, r0
 800224a:	d103      	bne.n	8002254 <_free_r+0x88>
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	1841      	adds	r1, r0, r1
 8002252:	6021      	str	r1, [r4, #0]
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	6054      	str	r4, [r2, #4]
 8002258:	e7ca      	b.n	80021f0 <_free_r+0x24>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	20000094 	.word	0x20000094

08002260 <sbrk_aligned>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4e0f      	ldr	r6, [pc, #60]	; (80022a0 <sbrk_aligned+0x40>)
 8002264:	000d      	movs	r5, r1
 8002266:	6831      	ldr	r1, [r6, #0]
 8002268:	0004      	movs	r4, r0
 800226a:	2900      	cmp	r1, #0
 800226c:	d102      	bne.n	8002274 <sbrk_aligned+0x14>
 800226e:	f000 f8bf 	bl	80023f0 <_sbrk_r>
 8002272:	6030      	str	r0, [r6, #0]
 8002274:	0029      	movs	r1, r5
 8002276:	0020      	movs	r0, r4
 8002278:	f000 f8ba 	bl	80023f0 <_sbrk_r>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	d00a      	beq.n	8002296 <sbrk_aligned+0x36>
 8002280:	2303      	movs	r3, #3
 8002282:	1cc5      	adds	r5, r0, #3
 8002284:	439d      	bics	r5, r3
 8002286:	42a8      	cmp	r0, r5
 8002288:	d007      	beq.n	800229a <sbrk_aligned+0x3a>
 800228a:	1a29      	subs	r1, r5, r0
 800228c:	0020      	movs	r0, r4
 800228e:	f000 f8af 	bl	80023f0 <_sbrk_r>
 8002292:	1c43      	adds	r3, r0, #1
 8002294:	d101      	bne.n	800229a <sbrk_aligned+0x3a>
 8002296:	2501      	movs	r5, #1
 8002298:	426d      	negs	r5, r5
 800229a:	0028      	movs	r0, r5
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	20000098 	.word	0x20000098

080022a4 <_malloc_r>:
 80022a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022a6:	2203      	movs	r2, #3
 80022a8:	1ccb      	adds	r3, r1, #3
 80022aa:	4393      	bics	r3, r2
 80022ac:	3308      	adds	r3, #8
 80022ae:	0006      	movs	r6, r0
 80022b0:	001f      	movs	r7, r3
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d232      	bcs.n	800231c <_malloc_r+0x78>
 80022b6:	270c      	movs	r7, #12
 80022b8:	42b9      	cmp	r1, r7
 80022ba:	d831      	bhi.n	8002320 <_malloc_r+0x7c>
 80022bc:	0030      	movs	r0, r6
 80022be:	f000 f8a9 	bl	8002414 <__malloc_lock>
 80022c2:	4d32      	ldr	r5, [pc, #200]	; (800238c <_malloc_r+0xe8>)
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	001c      	movs	r4, r3
 80022c8:	2c00      	cmp	r4, #0
 80022ca:	d12e      	bne.n	800232a <_malloc_r+0x86>
 80022cc:	0039      	movs	r1, r7
 80022ce:	0030      	movs	r0, r6
 80022d0:	f7ff ffc6 	bl	8002260 <sbrk_aligned>
 80022d4:	0004      	movs	r4, r0
 80022d6:	1c43      	adds	r3, r0, #1
 80022d8:	d11e      	bne.n	8002318 <_malloc_r+0x74>
 80022da:	682c      	ldr	r4, [r5, #0]
 80022dc:	0025      	movs	r5, r4
 80022de:	2d00      	cmp	r5, #0
 80022e0:	d14a      	bne.n	8002378 <_malloc_r+0xd4>
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	0029      	movs	r1, r5
 80022e6:	18e3      	adds	r3, r4, r3
 80022e8:	0030      	movs	r0, r6
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	f000 f880 	bl	80023f0 <_sbrk_r>
 80022f0:	9b01      	ldr	r3, [sp, #4]
 80022f2:	4283      	cmp	r3, r0
 80022f4:	d143      	bne.n	800237e <_malloc_r+0xda>
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	3703      	adds	r7, #3
 80022fa:	1aff      	subs	r7, r7, r3
 80022fc:	2303      	movs	r3, #3
 80022fe:	439f      	bics	r7, r3
 8002300:	3708      	adds	r7, #8
 8002302:	2f0c      	cmp	r7, #12
 8002304:	d200      	bcs.n	8002308 <_malloc_r+0x64>
 8002306:	270c      	movs	r7, #12
 8002308:	0039      	movs	r1, r7
 800230a:	0030      	movs	r0, r6
 800230c:	f7ff ffa8 	bl	8002260 <sbrk_aligned>
 8002310:	1c43      	adds	r3, r0, #1
 8002312:	d034      	beq.n	800237e <_malloc_r+0xda>
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	19df      	adds	r7, r3, r7
 8002318:	6027      	str	r7, [r4, #0]
 800231a:	e013      	b.n	8002344 <_malloc_r+0xa0>
 800231c:	2b00      	cmp	r3, #0
 800231e:	dacb      	bge.n	80022b8 <_malloc_r+0x14>
 8002320:	230c      	movs	r3, #12
 8002322:	2500      	movs	r5, #0
 8002324:	6033      	str	r3, [r6, #0]
 8002326:	0028      	movs	r0, r5
 8002328:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800232a:	6822      	ldr	r2, [r4, #0]
 800232c:	1bd1      	subs	r1, r2, r7
 800232e:	d420      	bmi.n	8002372 <_malloc_r+0xce>
 8002330:	290b      	cmp	r1, #11
 8002332:	d917      	bls.n	8002364 <_malloc_r+0xc0>
 8002334:	19e2      	adds	r2, r4, r7
 8002336:	6027      	str	r7, [r4, #0]
 8002338:	42a3      	cmp	r3, r4
 800233a:	d111      	bne.n	8002360 <_malloc_r+0xbc>
 800233c:	602a      	str	r2, [r5, #0]
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	6011      	str	r1, [r2, #0]
 8002342:	6053      	str	r3, [r2, #4]
 8002344:	0030      	movs	r0, r6
 8002346:	0025      	movs	r5, r4
 8002348:	f000 f86c 	bl	8002424 <__malloc_unlock>
 800234c:	2207      	movs	r2, #7
 800234e:	350b      	adds	r5, #11
 8002350:	1d23      	adds	r3, r4, #4
 8002352:	4395      	bics	r5, r2
 8002354:	1aea      	subs	r2, r5, r3
 8002356:	429d      	cmp	r5, r3
 8002358:	d0e5      	beq.n	8002326 <_malloc_r+0x82>
 800235a:	1b5b      	subs	r3, r3, r5
 800235c:	50a3      	str	r3, [r4, r2]
 800235e:	e7e2      	b.n	8002326 <_malloc_r+0x82>
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	e7ec      	b.n	800233e <_malloc_r+0x9a>
 8002364:	6862      	ldr	r2, [r4, #4]
 8002366:	42a3      	cmp	r3, r4
 8002368:	d101      	bne.n	800236e <_malloc_r+0xca>
 800236a:	602a      	str	r2, [r5, #0]
 800236c:	e7ea      	b.n	8002344 <_malloc_r+0xa0>
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	e7e8      	b.n	8002344 <_malloc_r+0xa0>
 8002372:	0023      	movs	r3, r4
 8002374:	6864      	ldr	r4, [r4, #4]
 8002376:	e7a7      	b.n	80022c8 <_malloc_r+0x24>
 8002378:	002c      	movs	r4, r5
 800237a:	686d      	ldr	r5, [r5, #4]
 800237c:	e7af      	b.n	80022de <_malloc_r+0x3a>
 800237e:	230c      	movs	r3, #12
 8002380:	0030      	movs	r0, r6
 8002382:	6033      	str	r3, [r6, #0]
 8002384:	f000 f84e 	bl	8002424 <__malloc_unlock>
 8002388:	e7cd      	b.n	8002326 <_malloc_r+0x82>
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	20000094 	.word	0x20000094

08002390 <_realloc_r>:
 8002390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002392:	0007      	movs	r7, r0
 8002394:	000e      	movs	r6, r1
 8002396:	0014      	movs	r4, r2
 8002398:	2900      	cmp	r1, #0
 800239a:	d105      	bne.n	80023a8 <_realloc_r+0x18>
 800239c:	0011      	movs	r1, r2
 800239e:	f7ff ff81 	bl	80022a4 <_malloc_r>
 80023a2:	0005      	movs	r5, r0
 80023a4:	0028      	movs	r0, r5
 80023a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023a8:	2a00      	cmp	r2, #0
 80023aa:	d103      	bne.n	80023b4 <_realloc_r+0x24>
 80023ac:	f7ff ff0e 	bl	80021cc <_free_r>
 80023b0:	0025      	movs	r5, r4
 80023b2:	e7f7      	b.n	80023a4 <_realloc_r+0x14>
 80023b4:	f000 f83e 	bl	8002434 <_malloc_usable_size_r>
 80023b8:	9001      	str	r0, [sp, #4]
 80023ba:	4284      	cmp	r4, r0
 80023bc:	d803      	bhi.n	80023c6 <_realloc_r+0x36>
 80023be:	0035      	movs	r5, r6
 80023c0:	0843      	lsrs	r3, r0, #1
 80023c2:	42a3      	cmp	r3, r4
 80023c4:	d3ee      	bcc.n	80023a4 <_realloc_r+0x14>
 80023c6:	0021      	movs	r1, r4
 80023c8:	0038      	movs	r0, r7
 80023ca:	f7ff ff6b 	bl	80022a4 <_malloc_r>
 80023ce:	1e05      	subs	r5, r0, #0
 80023d0:	d0e8      	beq.n	80023a4 <_realloc_r+0x14>
 80023d2:	9b01      	ldr	r3, [sp, #4]
 80023d4:	0022      	movs	r2, r4
 80023d6:	429c      	cmp	r4, r3
 80023d8:	d900      	bls.n	80023dc <_realloc_r+0x4c>
 80023da:	001a      	movs	r2, r3
 80023dc:	0031      	movs	r1, r6
 80023de:	0028      	movs	r0, r5
 80023e0:	f7ff fbc0 	bl	8001b64 <memcpy>
 80023e4:	0031      	movs	r1, r6
 80023e6:	0038      	movs	r0, r7
 80023e8:	f7ff fef0 	bl	80021cc <_free_r>
 80023ec:	e7da      	b.n	80023a4 <_realloc_r+0x14>
	...

080023f0 <_sbrk_r>:
 80023f0:	2300      	movs	r3, #0
 80023f2:	b570      	push	{r4, r5, r6, lr}
 80023f4:	4d06      	ldr	r5, [pc, #24]	; (8002410 <_sbrk_r+0x20>)
 80023f6:	0004      	movs	r4, r0
 80023f8:	0008      	movs	r0, r1
 80023fa:	602b      	str	r3, [r5, #0]
 80023fc:	f7fe f8b4 	bl	8000568 <_sbrk>
 8002400:	1c43      	adds	r3, r0, #1
 8002402:	d103      	bne.n	800240c <_sbrk_r+0x1c>
 8002404:	682b      	ldr	r3, [r5, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d000      	beq.n	800240c <_sbrk_r+0x1c>
 800240a:	6023      	str	r3, [r4, #0]
 800240c:	bd70      	pop	{r4, r5, r6, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	2000009c 	.word	0x2000009c

08002414 <__malloc_lock>:
 8002414:	b510      	push	{r4, lr}
 8002416:	4802      	ldr	r0, [pc, #8]	; (8002420 <__malloc_lock+0xc>)
 8002418:	f000 f814 	bl	8002444 <__retarget_lock_acquire_recursive>
 800241c:	bd10      	pop	{r4, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	200000a0 	.word	0x200000a0

08002424 <__malloc_unlock>:
 8002424:	b510      	push	{r4, lr}
 8002426:	4802      	ldr	r0, [pc, #8]	; (8002430 <__malloc_unlock+0xc>)
 8002428:	f000 f80d 	bl	8002446 <__retarget_lock_release_recursive>
 800242c:	bd10      	pop	{r4, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	200000a0 	.word	0x200000a0

08002434 <_malloc_usable_size_r>:
 8002434:	1f0b      	subs	r3, r1, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1f18      	subs	r0, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	da01      	bge.n	8002442 <_malloc_usable_size_r+0xe>
 800243e:	580b      	ldr	r3, [r1, r0]
 8002440:	18c0      	adds	r0, r0, r3
 8002442:	4770      	bx	lr

08002444 <__retarget_lock_acquire_recursive>:
 8002444:	4770      	bx	lr

08002446 <__retarget_lock_release_recursive>:
 8002446:	4770      	bx	lr

08002448 <_init>:
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244e:	bc08      	pop	{r3}
 8002450:	469e      	mov	lr, r3
 8002452:	4770      	bx	lr

08002454 <_fini>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245a:	bc08      	pop	{r3}
 800245c:	469e      	mov	lr, r3
 800245e:	4770      	bx	lr
